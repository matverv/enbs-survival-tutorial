%!PS-Adobe-3.1
%ADO_DSC_Encoding: Windows Roman
%%Title: ADPD191.pdf
%%Creator: Adobe Acrobat 11.0.23
%%For: mathynv
%%CreationDate: 30.03.2021, 14:35:40
%%BoundingBox: 0 0 596 842
%%HiResBoundingBox: 0 0 595.2200 842
%%CropBox: 0 0 595.2200 842
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%PageOrder: Ascend
%%Pages: (atend)
%%DocumentProcessColors: (atend)
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 1964 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.4-c006 80.159825, 2016/09/16-03:31:08        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
    xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
    xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
   xmp:CreateDate="2021-03-30T14:35:06+02:00"
   xmp:MetadataDate="2020-05-05T09:24:49-07:00"
   xmp:ModifyDate="2021-03-30T14:35:06+02:00"
   xmp:CreatorTool="Adobe InDesign CS6 (Macintosh)"
   xmpMM:InstanceID="uuid:52bc2743-9ffe-4e10-b7a5-7396e4a5c50f"
   xmpMM:OriginalDocumentID="adobe:docid:indd:d03427a0-e66b-11de-bd24-81ae6252b62b"
   xmpMM:DocumentID="xmp.id:58FD27AD2420681183D19B836E099B61"
   xmpMM:RenditionClass="proof:pdf"
   dc:format="application/pdf"
   pdf:Producer="Acrobat Distiller 11.0 (Windows)"
   pdf:Trapped="False">
   <xmpMM:DerivedFrom
    stRef:instanceID="xmp.iid:B869FA250B206811822A9462A5DE9D72"
    stRef:documentID="xmp.did:02C07363623CE9118DEBC0B6E2317044"
    stRef:originalDocumentID="adobe:docid:indd:d03427a0-e66b-11de-bd24-81ae6252b62b"
    stRef:renditionClass="default"/>
   <xmpMM:History>
    <rdf:Seq>
     <rdf:li
      stEvt:action="converted"
      stEvt:parameters="from application/x-indesign to application/pdf"
      stEvt:softwareAgent="Adobe InDesign CS6 (Macintosh)"
      stEvt:changed="/"
      stEvt:when="2019-03-06T17:03:58-05:00"/>
    </rdf:Seq>
   </xmpMM:History>
   <dc:creator>
    <rdf:Seq>
     <rdf:li>mathynv</rdf:li>
    </rdf:Seq>
   </dc:creator>
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">pembrolizumab.pdf</rdf:li>
    </rdf:Alt>
   </dc:title>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[{Catalog} {Doc_Metadata} /Metadata pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
<</PageSize [595.22 842 ] >> setpagedevice
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
Adobe_AGM_Core/ps gx
gsave
/0 
[/DeviceCMYK] /CSA add_res
/0 
<<
/Name (Black)
/1 
[/DeviceCMYK] /CSA add_res
/CSA /1 get_csa_by_name
/MappedCSA /1 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
grestore
Adobe_AGM_Core/pt gx
%%EndPageSetup
1 -1 scale 0 -842 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 842 li
595.22 842 li
595.22 0 li
cp
clp
true sop
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: PBAAAA+OTNEJMScalaSansLFCap Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2021 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /PBAAAA+OTNEJMScalaSansLFCap def
/FontInfo 8 dict dup begin
/Notice (Copyright 2002 Martin Majoor. ) def
/Weight (Normal) def
/ItalicAngle 0 def
/BaseFontName (OTNEJMScalaSansLFCap) def
/FSType 0 def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 32 /n put
dup 33 /space put
dup 34 /e put
dup 35 /g put
dup 36 /l put
dup 37 /j put
dup 38 /m put
dup 39 /d put
def
/FontBBox {-91 -262 1000 868} def
end
systemdict begin
dup /Private
12 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-19 -0 478 487 660 672] def
/BlueScale 0.03963 def
/StdHW [67] def
/StdVW [100] def
/StemSnapH [67 84] def
/StemSnapV [100 152] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
9 dict dup begin
/n <1C60D8A8C9B6513033C2F9D15CC1834AB5A5B508E50698441B839A1CB175
824680AFE3DA5CFDD99E36E5735D8F0DF137F5A0DD756CCAE690A3A85B084CF0
4FD708C64ED7F53E17> |-
/space <1C60D8A8C9B8707C25> |-
/e <1C60D8A8C9B75D88AE3D84DA43A5B420D124A0A2C73E6ED5755569D39F6D
A47895944C2B390FED326A603924CC29D6837E4F917B450053C6CF4AE9> |-
/g <1C60D8A8C9B665537E78C203EFAFAEFE17F262BEE5F50B3F1E4E30E8FC93
58974EA57E9D5093D44C79E14D4F88DAFCB167C123E1AA2452ED7C57F8DA7300
B9B2455B540ADCC4B77D277F01C9F8C4BCF3AEE62DF48337CDE326DEB0714596
7B5D7F7B1AD7C4E569A2B7232B6299A090F8865A7538B930AAB9F6BEDFF2> |-
/l <1C60D8A8C9B767989F2E23E635852C5F546CD43BA7C50B9BD76110BD2F6F
21100D465324A1E6> |-
/j <1C60D8A8C9B849F2330B76DE086AA854CB54F192567A17BAB639A6C94C12
5F850687C28E14E824BFFADD7EDC85E18C7360FAFE18> |-
/m <1C60D8A8C9B6EEDBC0F165B180544AE5AAD7DD326645BB9FD81071CBEAB3
A57B631D86C830A10BE6FB32BC1E4894D3F84B107C7827ABC4C0355A696C0823
AEE95C517D53114F635C7B0C541A16FFBD81B086C5DC73F5FE9CCA5DF39B9C0E
1B58> |-
/d <1C60D8A8C9B7DA5D5522EBBCE41F92C76100B3A1AED7211DD469F48F37E1
4A42CFD008D8C55E853258500F0DEFA800F5283EC14A6E897332B59919F85ABE
9C334587962BEF91834920D2832EB74F419695508A25C091D536A56C6DCE277F
F76FCA115530F9550F16447A> |-
/.notdef <1C60D8A8C9B8707C25> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/QOROMA+OTNEJMScalaSansLFCap /PBAAAA+OTNEJMScalaSansLFCap findfont ct_VMDictPut
/QOROMA+OTNEJMScalaSansLFCap*1 
[32{/.notdef}rp /n /space /e /g /l /j /m 
/d 216{/.notdef}rp]
QOROMA+OTNEJMScalaSansLFCap nf
QOROMA+OTNEJMScalaSansLFCap*1 [7.25 0 0 -7.25 0 0 ]msf
198.576 751.216 mo
( !" #$!%!&"')
[4.9155 1.88499 3.53798 4.9155 4.59645 3.23354 1.88499 2.18225 1.88501 5.60425 3.53798 0 
]xsh
%ADOBeginSubsetFont: HIBBAA+OTNEJMScalaSansOSF Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2021 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /HIBBAA+OTNEJMScalaSansOSF def
/FontInfo 8 dict dup begin
/Notice (Copyright 2002 Martin Majoor.) def
/Weight (Normal) def
/ItalicAngle 0 def
/BaseFontName (OTNEJMScalaSansOSF) def
/FSType 0 def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 32 /space put
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 51 /three put
dup 56 /eight put
dup 59 /semicolon put
def
/FontBBox {-91 -262 1000 868} def
end
systemdict begin
dup /Private
13 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-19 -0 453 466 660 672 729 739] def
/OtherBlues [-256 -239] def
/BlueScale 0.03963 def
/StdHW [65] def
/StdVW [100] def
/StemSnapH [65 84] def
/StemSnapV [100 153] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
8 dict dup begin
/space <1C60D8A8C9B8707C25> |-
/zero <1C60D8A8C9B7E1F86A36F1779C3E7C008B9CB42B2E1EAA2CE769AD05E
18401261DABA7DCFFB82E98468E674EA2A2484BDFEE48F72B9986DC69B0E1B9D
5EBF1F32F383BCE7126BE14177DFD6C7CBDA6357078152363929A35> |-
/one <1C60D8A8C9B73549B31C2357946E1C368B820F88DE6DDF1A3000B42E55
3C96D0198112FA512B> |-
/two <1C60D8A8C9B7AD0A47284BD0BAB18B82625C334D0D10A34012897522CB
12CEA690C2494AD626108F442D7D8391858A8C7C812A06D8FA47AE89E833E3E0
46A0F45B4C8494380A69405E5D34EA8DB66B7F3DF53DC98A13AB6F747F5894AE
023A50AACFEB6788B91A> |-
/three <1C60D8A8C9B76D61A2E96035C187778D9E8E1A93E3776BDE657FC6FE
8C5CFAC78EB3C07B9BBD381FF9D418D071DE392C71DBC0AEEB9FB45C48B4E84F
0C503D48F68795ACA0D6D01CEAB73D85805B56FACAE7F6E7F08961ECCAD5AFD0
A9BA152EA5BEC6260DB02B31A7871FA9548C2A52D398246DAC636B8FC2FD06> |-
/eight <1C60D8A8C9B7A8F2A7C62032ECA9E56D82F62D425E6E1E16412DB346
840F501E28F6E8BA9D8D14DF58B7B1C33A152F93A111A094A2FAAC77708F058C
301EDC3BEC920353A1685147D2D32965821E7179E9D31E80724175FC67DA9FE0
531B5CCB0B9103488F1DAB882B5A3D8C27C2FD5E0EB9AF60170610720AC7021A
7BA2E866E60BE1E86DF1B0E89B49D9D790BFD4689F0FC1654A53A9058C65D1AA
5219CC2935EE606090F8B3DB34328C1158583B0F> |-
/semicolon <1C60D8A8C9B8714D247D6CEE0B78839A0110FC92760E7A602435
1C48F57F3A30CC4E74CF340081D5904D20BEF074FB6B36069ED06D2CBACDABD2
BF5E161552B989278ED0B622B8B3F294FF13E4B86A8B4D8D6DC9A5E38B94A301
5352848550B89C8F074D563F17> |-
/.notdef <1C60D8A8C9B8707C25> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/QOROMB+OTNEJMScalaSansOSF /HIBBAA+OTNEJMScalaSansOSF findfont ct_VMDictPut
/QOROMB+OTNEJMScalaSansOSF*1 
[32{/.notdef}rp /space 15{/.notdef}rp /zero /one /two /three 4{/.notdef}rp 
/eight 2{/.notdef}rp /semicolon 196{/.notdef}rp]
QOROMB+OTNEJMScalaSansOSF nf
QOROMB+OTNEJMScalaSansOSF*1 [7.25 0 0 -7.25 0 0 ]msf
241.243 751.216 mo
( 380;12)
[1.88499 3.18996 3.6902 4.20505 1.89229 2.89999 0 ]xsh
%ADOBeginSubsetFont: PBAAAA+OTNEJMScalaSansLFCap AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2021 Adobe System Incorporated. All rights reserved.
systemdict begin
QOROMA+OTNEJMScalaSansLFCap dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/o <1C60D8A8C9B67A40DAAC1B87D8A00F8E7335886C8F5645B2D62510C15BFF
8961D667CA5ECADA10EFFEA09CD818A4B22393BB108E20FB8D08E96A7AC699F6
391B01FC24DF76CB82C211DB08C229678D57428E9A37> |-
/r <1C60D8A8C9B7BA8F69059019FA71A973F812A3F4CD3A0FC156C2483DF52C
00FA45B611E61FF6DBEBC47FE8F5187F15B76382D467FB373CDA9BF21A8244BD
259F18AAFC095D92B019832BC9283CAF3A36A450F57E8541289242189674B21C
8F16CB2017F8D96DD877F0EE1A2E> |-
/period <1C60D8A8C9B8714DA0A30EEF65BC7AC6486E75EAEC0F42C2FBF5381
969231085C854E76539FF93A09F86> |-
systemdict /gcheck known {setglobal} if end {end} if
end
QOROMA+OTNEJMScalaSansLFCap /Encoding get
dup 40 /o put
dup 41 /r put
dup 46 /period put
pop
%ADOEndSubsetFont
/QOROMA+OTNEJMScalaSansLFCap*1 
[32{/.notdef}rp /n /space /e /g /l /j /m 
/d /o /r 4{/.notdef}rp /period 209{/.notdef}rp]
QOROMA+OTNEJMScalaSansLFCap nf
QOROMA+OTNEJMScalaSansLFCap*1 [7.25 0 0 -7.25 0 0 ]msf
262.66 751.216 mo
(! "%&.\(\)#)
[7.32178 4.9155 3.53796 2.18225 5.60425 1.8923 4.76328 3.79175 0 ]xsh
%ADOBeginSubsetFont: QJJAAA+OTNEJMScalaSansLFSmallCap Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2021 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /QJJAAA+OTNEJMScalaSansLFSmallCap def
/FontInfo 8 dict dup begin
/Notice (Copyright 2002 Martin Majoor. ) def
/Weight (Normal) def
/ItalicAngle 0 def
/BaseFontName (OTNEJMScalaSansLFSmallCap) def
/FSType 0 def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 32 /space put
dup 33 /a put
dup 34 /r put
dup 35 /c put
dup 36 /h put
dup 44 /comma put
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 57 /nine put
dup 77 /M put
def
/FontBBox {-78 -262 1000 868} def
end
systemdict begin
dup /Private
12 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-19 -0 478 487 660 672] def
/BlueScale 0.03963 def
/StdHW [67] def
/StdVW [100] def
/StemSnapH [67 84] def
/StemSnapV [100 152] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
12 dict dup begin
/space <1C60D8A8C9B8707C25> |-
/a <1C60D8A8C9B7B71A30C3284C53FFE1A66A0D47B164BA782CB5A0A3617FD0
787F451C9E64B9E58AFC6C89FBFA876D5C29FB2233DB41F0AB87C1> |-
/r <1C60D8A8C9B7BA8F69059019FA71A973F812A3F4CD3A0FC156C2483DF52C
00FA45B611E61FF6DBEBC47FE8F5187F15B76382D467FB373CDA9BF21A8244BD
259F18AAFC095D92B019832BC9283CAF3A36A450F57E8541289242189674B21C
8F16CB2017F8D96DD877F0EE1A2E> |-
/c <1C60D8A8C9B7B71A39578185F1421479678E7BF97E3B022AE66501A87F13
201D2320AB35F0814D51C47D9A290E216E4026F9643D9023978F2E405E12E1F8
5CB9E87E91A99C69F54198358A9F3535E5F959A2CCBA3C9EAF924046018B9CE9
3F262D48D8> |-
/h <1C60D8A8C9B6225AB0C70601B80869333B9C0140B16BCFDFAC0376DE50BC
8A8EBBF7DB825FA67FD1884A3A9C1574E50033FC345EE1793E5A2AB1EA6433E5> |-
/comma <1C60D8A8C9B86ED9085AC2ADC743749F463263303BA9F350C517B08A
23CD81ACBA8CCD6FE7CB86A0DEE5B69C6E7D617734B015D03E48D30B3CE4F6EF
98492CAA01F1B4A0> |-
/zero <1C60D8A8C9B7A73D379AAF994D02C3BA60A98E84D0FF463A20B696413
0B2182D0CAE2263F498F73CE7A53186CD7424C565EDA2154D11BF12A79D8A990
CC36705E61375A39B9F7578290D23CC606A2122AF2F2EEA> |-
/one <1C60D8A8C9B7A73DC54C6E6F6A039FCE0D3BB64E8F98C3AB2CCC5DF0AA
E6F876CE703165FC8E15034C8552AACD63BE0CB9F98346F436> |-
/two <1C60D8A8C9B7A73DC5194EFF248598B81DEBB4FB23EBCCDA3BE53CD30F
91E7F831525FEFBF2196ADA332591DD177945E57264F725324A826AF38465327
B5294CA21A77636324F821A6B924DBBFD62B7DCDC0E131032894D112523B0AC1
86FA26EA3069ED800780> |-
/nine <1C60D8A8C9B7A73DB587919AE8A8E28C116458ABD2194EE667A193A17
F6F94A615B6DCA0C025602BF42DB533ED44E457FDEDCCAEE7CDFB0C838243D40
07783E7A7FC4962BA5AE898065B9465F2E97212419626F278EE9A71723CBD1F0
716E7D251516D61EAE0C38A383FCD258E65748233C43ECA32D09F280AEA13E60
119> |-
/M <1C60D8A8C9B6EEDBC0F165B180544AE5AAD7DD326645BB9FD81071CBEAB3
A57B631D86C830A10BE6FB32BC1E4894D3F84B107C7827ABC4C0355A696C0823
AEE95C517D53114F635C7B0C541A16FFBD81B086C5DC73F5FE9CCA5DF39B9C0E
1B58> |-
/.notdef <1C60D8A8C9B8707C25> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/QOROMC+OTNEJMScalaSansLFSmallCap /QJJAAA+OTNEJMScalaSansLFSmallCap findfont ct_VMDictPut
/QOROMC+OTNEJMScalaSansLFSmallCap*1 
[32{/.notdef}rp /space /a /r /c /h 7{/.notdef}rp /comma 
3{/.notdef}rp /zero /one /two 6{/.notdef}rp /nine 19{/.notdef}rp /M 
178{/.notdef}rp]
QOROMC+OTNEJMScalaSansLFSmallCap nf
QOROMC+OTNEJMScalaSansLFSmallCap*1 [7.25 0 0 -7.25 0 0 ]msf
301.267 751.216 mo
( M!"#$ 21, 2019)
[7.32321 5.60428 3.81354 3.79175 3.81354 5.05322 1.88501 3.69751 3.69751 1.89948 1.88501 3.69751 
3.69748 3.69751 0 ]xsh
%ADOBeginSubsetFont: GFNBAA+OTNEJMQuadraatCap Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2021 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /GFNBAA+OTNEJMQuadraatCap def
/FontInfo 8 dict dup begin
/Notice (Copyright by Fsm plus, 2002.  All Rights reserved. ) def
/Weight (Normal) def
/ItalicAngle 0 def
/BaseFontName (OTNEJMQuadraatCap) def
/FSType 0 def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 32 /one put
dup 33 /two put
dup 34 /three put
def
/FontBBox {-164 -262 1109 903} def
end
systemdict begin
dup /Private
10 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-10 -0 495 507 641 655 770 775] def
/BlueScale 0.03963 def
/StdHW [39] def
/StdVW [83] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
4 dict dup begin
/one <1C60D8A8C9B7A4C8638945BA64787E9271E0A63C4102B623DB310CF6D9
EA8E68ADD577F26B0CA28263B5A8CB58A5188D2D9E615B94A073E1F84AE3B66F
4F5F94CA046294833808> |-
/two <1C60D8A8C9B7A4C8638945BA64787E9271CADBB4D719197D9071293A3F
9A0E84C75AAE6FB02B3245ABC7BB4B016D10AD2066FCB05A0588CA5C9F4408C3
BEC9E20CBEE40B6127BEB1BE7DF38802827F470B6BD7AFE18071481977B69304
02CDE5> |-
/three <1C60D8A8C9B7A4C8638945BA64787E9271C92DCDF995760ADC32FA05
374C1A7F9E2C991DC629575A7FB1477B06C44B6C337BE04F0FBBDB30C1361E5E
CA4D6E7AE129A953C8E319FBEC73E64726F3FA881945FD04E0BEAA0AAFD87259
EE37C369EA5C299560F4F36CD758A9C425CC5AFF269E70BE51A9A8C15FEBEBA8
A5FB2634EA43438729AC5E1B92D5CD86> |-
/.notdef <1C60D8A8C9B89DB7EC> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/QOROMD+OTNEJMQuadraatCap /GFNBAA+OTNEJMQuadraatCap findfont ct_VMDictPut
/QOROMD+OTNEJMQuadraatCap*1 
[32{/.notdef}rp /one /two /three 221{/.notdef}rp]
QOROMD+OTNEJMQuadraatCap nf
QOROMD+OTNEJMQuadraatCap*1 [9.4999 0 0 -9.5 0 0 ]msf
530.898 750.228 mo
(  !")sh
%ADOBeginSubsetFont: HJCBAA+OTNEJMQuadraatSmallCap Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2021 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /HJCBAA+OTNEJMQuadraatSmallCap def
/FontInfo 8 dict dup begin
/Notice (Copyright by Fsm plus, 2002.  All Rights reserved. ) def
/Weight (Normal) def
/ItalicAngle 0 def
/BaseFontName (OTNEJMQuadraatSmallCap) def
/FSType 0 def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 32 /P put
dup 33 /e put
dup 34 /m put
dup 35 /b put
dup 36 /r put
dup 37 /o put
dup 38 /l put
dup 39 /i put
dup 40 /z put
dup 41 /u put
dup 42 /a put
dup 43 /space put
dup 44 /p put
dup 45 /s put
dup 46 /x put
dup 47 /t put
dup 48 /n put
dup 49 /f put
dup 50 /hyphen put
dup 51 /c put
dup 65 /A put
dup 67 /C put
dup 82 /R put
def
/FontBBox {-164 -262 1109 903} def
end
systemdict begin
dup /Private
10 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-10 -0 495 507 641 655 770 775] def
/BlueScale 0.03963 def
/StdHW [39] def
/StdVW [83] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
24 dict dup begin
/P <1C60D8A8C9B78B91D1E16E1B05D6D43E0F20CC710C715508AA758DB7905B
1DA1B1EBB86B161C1341CDEF7AB477953B7C71F5181B4C1A0AF066783DBB892D
EE8EB48DF6D9B82759CC555D5D7AEE20DAA1BCFB36A047B0D6AEADD9C5AA960B
85B1154F47E6997959> |-
/e <1C60D8A8C9B79AB852548592F8745FB4A5B92FCA184B440FA4E61F5BDFDB
F398863C842B63E305D8F2A4FE1A30244690027482426310DE351181586DDC55
558F928C6279A621E57620F5F2DF0159AD8FEF6F84F473A29F294F865AD3083E
AF8673E80484B4FBF8C212852A63A52BB7140FAADF315D03> |-
/m <1C60D8A8C9B6CC619E390C52F2D1EE62CDD7D11E287256CEC4D58E6080BB
CD576C92E88356B3C7C5872437C87B70B55BBC5D61043F228F242E5E05AFEA50
71A8ADCE784C30F1D4022859CCA4666E465FD77E00FF3D3ED73BB21146D832E2
1A3D2A3648166F60DC6571266618375B1A0D1DE8B3A6528912078B4499B38D77
B5CC32B0CAED04FDC3FEECD5E7E04985D1F6E736> |-
/b <1C60D8A8C9B7E965A9610067620097EE109065984F1F2741BF9105F609DA
2DE6D60C45A77D9735FB08F4403557C9C3850DFFF9574E08FBCDF0B6C09BC289
DB785B6C0944CD5D840325202A4F243FA17BCAB4CCD090E65B54800DE5AC410B
3DE6FB0F36423D65429973B3F3CD2C64F6E56CF95BE2D6EE9B4E54EF0EC9AEB7
26AFD17927377E2414F5D4A7F1F58999A1E05D40A8AB3BDD47366907279A411A
223469774DF91783303FC77CB4156C15> |-
/r <1C60D8A8C9B7D8BE16433006F0354DE48C44AA80EAA1848F367DCAB7023E
419501C784F8E7AC7878894927E66B14AF83DE2741D0B8F22BE83DB405B81E99
B9E6747643547610D92DEE948A799783DADEE0AE7E673FA8642257A05A402164
B9DA3E6E017F2CD23593EF62572B8A81FC4C6825DBF56DC3523573AE45B987B5
3714C6522A454B3ED9664A37B75124A813D718099A2AA867B0EFCD44D4DC51DB
C8AA9873C8C3017C9337226E4BD93D31E92944E31139EB4D70896A1F> |-
/o <1C60D8A8C9B67DB588E8FB49EBD03A861FC70A09FD588E70A5A858374A1B
3C4D2C8FD57ACEF47DED2BDED6FA07B5D6110CEB15CBD622DC8407827E053E66
4BFC04F1594161D23491C47321EBD0C6EF218B4D041FA81713D46A393E> |-
/l <1C60D8A8C9B7BF8652B67D5A26790D878CD42BAB0C31CB6065689CD8169E
64A4E220AFE4AD317359CD9EEB5EB43986F21EA055B9DB77FB40C4DE1C7CE3A3
919B7E8DF7A52A24646E86C91C63FC1FD577> |-
/i <1C60D8A8C9B73970E3D6F5128600CCE9663BF8A9644ACDF0BF29957399F2
0BF834F87E90413BD1A2162ED18CBD0BA5CA72034F36FEA75531CB34EF483DBB
C72906BC111AB4B9> |-
/z <1C60D8A8C9B7B9B9D1E874FE9F6E74F6182649FB48FD97D79D9831512069
5129DAA3257CFFFEE2CE8AE3448DF1C59F8BE66A19A5C4C8A507EF9D996AAAFB
D944EB030802350154B2819FB6FBF7F33B89F35A91EBC6> |-
/u <1C60D8A8C9B64B6A2B1E14C8C6DE2CE127319D1B8EB0F39375F5ED50F541
C1AA7A87C90CA75380D8923327041CB8845C6D6C622983F2F3AD32B56506D173
4C2D8B4BC9F7524B512875867044F52B1B76BE2B37572351E45B987A42534B78
B097358958B57EFE62E20D954C98222636FD2197F514C693A6E627BD91184666
E5F5D61385A336A636AC2EEA554905A82A1C925B1634> |-
/a <1C60D8A8C9B79AB852548592F8745FB4A5F8DB79BB04C91C10CBCCC5004D
31E2D02B86C1A660078EE41CD166162FC9F22036A0228EBB05C68909C7D2C02D
AACD1653A85386ABF6BEA0AEEBD025DB766CF58901831228E25A2BFC94386418
C0EB2BB20757B266D762BED703684D8ADA9E40E0EE52077D87CC> |-
/space <1C60D8A8C9B89DB7EC> |-
/p <1C60D8A8C9B78B91D1E16E1B05D6D43E0F20CC710C715508AA758DB7905B
1DA1B1EBB86B161C1341CDEF7AB477953B7C71F5181B4C1A0AF066783DBB892D
EE8EB48DF6D9B82759CC555D5D7AEE20DAA1BCFB36A047B0D6AEADD9C5AA960B
85B1154F47E6997959> |-
/s <1C60D8A8C9B779148898E73597D04F488D963AAEA18C17FF6A308763B881
C22571A91D3FA1266256D4F66FC5338DFD992762293085F5EA3FC2E92055C534
D88EA243099CC37E591600836EAAC0A5A1C984CFBA416480F46F46194537596D
65EEDC13BD4C8904308DDFAE8B9BA84AB2EAAB4233B676D65428FB012F2DBC43
A195926D54C1059BFF8C0C6C7766EFD1B1AC2A292FDBA220120322D61B3F7EAD> |-
/x <1C60D8A8C9B78FDBCC74CE71D26F2B62B293A7836168C538F58213E8E7F3
2B062178CFF13DB88CC0B7F1347CCCB8AAAB722221F1ADA3C8036AAB288E6570
532595B8970C18813B1B8099F874D28EEFC19AE4C7D7112F8738805C4C407F11
BE64C270BFF5C777DEE6D2D52CDE53F24DB98D2F7E6E1140DBD7FA0A406AD818
270C6F3AE8E901C803E1C586A48CAF24712501FB07D383B6A84BAFE15EE328C3
5732927F97C06036336607210698E7A7F4A51950> |-
/t <1C60D8A8C9B7BDE39A19113E4D1FFDF81AE96C26E2B8ACBB13E12FE289D6
1E0801419A68FBFED941913E3EDE3A155538B439EC13F9714312237EFA3C883D
47FD177BAF589C1BC89DD78C5DBEF1CE193EFB9D50A39BE8D1145928B01A51CF
89F250A8> |-
/n <1C60D8A8C9B61C8C1935A3D14F681B8952FCCF9F739C29DC47E8385746F6
89CFAEB2E548372F8F751843951A3EFA75C1307F04748A461C735BE71C1C9B95
E59E666D6636F58253849A80EBF6303118C42630524C469C9D6347E7290C7B8A
2F64B3F07562AFCACA28> |-
/f <1C60D8A8C9B7BF8652B67D5A26790D878CD744A3DACCBBCBD280DE0AC16A
7B764606E66FB1B394CD7D89C7B64264C791E8F9CA745F1975314EB97535F857
2881ADAE638327ED1CA8BBC4CE2BED49CDCF163742921CEEE8CE2C9658735E69
64ADA6B812709E298993F5AD7FAD> |-
/hyphen <1C60D8A8C9B820E2DE9AF6E01DB2AE3D89260AA1BB6E051FA3A52F3
EF931C2C08F843DE16F> |-
/c <1C60D8A8C9B7917E8553416973468AAA4D9BC66F4F32D3C50D05A3E70208
DCF1A3325606ECE6EBA4056153E3F9349E075AA37F20C2E4EA419D38C7AEF995
A7264ADF44E154CB30B68ED4E437CB4B4988CD5A93FCC094942AECD01EF9A6A4
A81F90EB0F63E013CE215A83768F23> |-
/A <1C60D8A8C9B79AB852548592F8745FB4A5F8DB79BB04C91C10CBCCC5004D
31E2D02B86C1A660078EE41CD166162FC9F22036A0228EBB05C68909C7D2C02D
AACD1653A85386ABF6BEA0AEEBD025DB766CF58901831228E25A2BFC94386418
C0EB2BB20757B266D762BED703684D8ADA9E40E0EE52077D87CC> |-
/C <1C60D8A8C9B7917E8553416973468AAA4D9BC66F4F32D3C50D05A3E70208
DCF1A3325606ECE6EBA4056153E3F9349E075AA37F20C2E4EA419D38C7AEF995
A7264ADF44E154CB30B68ED4E437CB4B4988CD5A93FCC094942AECD01EF9A6A4
A81F90EB0F63E013CE215A83768F23> |-
/R <1C60D8A8C9B7D8BE16433006F0354DE48C44AA80EAA1848F367DCAB7023E
419501C784F8E7AC7878894927E66B14AF83DE2741D0B8F22BE83DB405B81E99
B9E6747643547610D92DEE948A799783DADEE0AE7E673FA8642257A05A402164
B9DA3E6E017F2CD23593EF62572B8A81FC4C6825DBF56DC3523573AE45B987B5
3714C6522A454B3ED9664A37B75124A813D718099A2AA867B0EFCD44D4DC51DB
C8AA9873C8C3017C9337226E4BD93D31E92944E31139EB4D70896A1F> |-
/.notdef <1C60D8A8C9B89DB7EC> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/QOROME+OTNEJMQuadraatSmallCap /HJCBAA+OTNEJMQuadraatSmallCap findfont ct_VMDictPut
/QOROME+OTNEJMQuadraatSmallCap*1 
[32{/.notdef}rp /P /e /m /b /r /o /l 
/i /z /u /a /space /p /s /x 
/t /n /f /hyphen /c 13{/.notdef}rp /A /.notdef 
/C 14{/.notdef}rp /R 173{/.notdef}rp]
QOROME+OTNEJMQuadraatSmallCap nf
QOROME+OTNEJMQuadraatSmallCap*1 [8.4999 0 0 -8.5 0 0 ]msf
150.579 73.7222 mo
( !"#$%&'\(\)"*#+,&\)-+A.'/'0'#+1%$+R!0*&2C!&&+C*$3'0%"*)
[4.6129 5.11777 7.16541 5.07016 5.53423 5.71614 4.82706 3.77737 4.8501 5.90831 7.40935 5.23764 
5.2019 2.36298 4.61119 4.68681 5.92105 4.24992 2.36298 5.45778 5.0311 3.80203 4.8364 3.6337 
6.66559 3.63287 5.2019 2.36298 4.78711 5.74335 5.61835 2.36298 5.87506 5.03363 6.55676 5.23764 
4.83301 3.48923 5.05405 5.0336 4.82709 4.74289 2.36295 5.30566 5.23676 5.53424 5.05743 3.63373 
6.5177 5.74506 7.40933 0 ]xsh
%ADOBeginSubsetFont: UGXAAA+OTNEJMQuadraat Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2021 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /UGXAAA+OTNEJMQuadraat def
/FontInfo 8 dict dup begin
/Notice (Copyright (c) by Fsm plus,, 2004. All rights reserved.) def
/Weight (Normal) def
/ItalicAngle 0 def
/BaseFontName (OTNEJMQuadraat) def
/FSType 0 def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 32 /h put
dup 33 /e put
dup 34 /space put
dup 35 /endash put
dup 36 /o put
dup 37 /m put
dup 38 /b put
dup 39 /i put
dup 40 /n put
dup 41 /a put
dup 42 /t put
dup 43 /three put
dup 44 /p put
dup 45 /r put
dup 46 /l put
dup 47 /z put
dup 48 /u put
dup 49 /d put
dup 50 /x put
dup 51 /s put
dup 52 /six put
dup 53 /two put
dup 54 /percent put
dup 55 /f put
dup 56 /g put
dup 57 /parenleft put
dup 58 /period put
dup 59 /S put
dup 60 /four put
dup 61 /y put
dup 62 /A put
dup 63 /parenright put
dup 64 /G put
dup 65 /v put
dup 66 /c put
dup 67 /eight put
dup 68 /one put
dup 69 /comma put
dup 84 /T put
def
/FontBBox {-164 -296 1109 917} def
end
systemdict begin
dup /Private
13 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-17 -0 455 472 641 655] def
/OtherBlues [-221 -214] def
/BlueScale 0.03963 def
/StdHW [38] def
/StdVW [76] def
/StemSnapH [38 41 45] def
/StemSnapV [76 83 90] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
40 dict dup begin
/h <1C60D8A8C9B79AB808913DA9DD7A7483159F64E97E3AE03BCD87F55B4B3D
2338FCDE305367205E4D53D2C1EABF4884810F1B788936E94E6ABB28E3C69127
6437095A44B4DE8EEBAD5F9B6DAFDDD9661F8E77B744A87A4ED8C985E393D11E
4C32A50F97975DE6E51BDE58BA1F2B532C03477E722F6E342A88AFC658BB536E
B299CF038BDBB2C1618485ACBCD89159DF9247934066A6D30B2A46907EB48581
BDE385717CABFEACF6AAA9> |-
/e <1C60D8A8C9B765F55D99AA822358405C43A907E8C0AAEE1FF084D2900F37
9919654385CD65E0F7F43A3BAF6064FC26DBE6D961FA72322DEC4BE3C2794390
62D71787B0FDA06BD03E796CEA501F99C978CA06FCA9C524DE7C20C914AE9D05
3C9EF9F90BCB5C7794DEDDE477> |-
/space <1C60D8A8C9B83C8E5F> |-
/endash <1C60D8A8C9B7AA912E097441310214BF580A1FE8606C71574D> |-
/o <1C60D8A8C9B7B6448220A4129CE38FCB6460B6DCDEEFDC37AED06311388A
AB5BE8D3DD1FFA5111617F76C0DFB4903099C314378BCACCD5FA839F110A4FA2
694D0F1F46F3EBBE867875AA91C4B72ED2EFC530A789> |-
/m <1C60D8A8C9B6A869863BE190DDC1BA1849B9492D7ABE054385A210B84871
9C665A1F28C9E8DDE024EBA5E218F24414BC2E4B568030549C6240E183D274D2
D0FE9B4DA7BD2719CCB7B47FD9B3638426A0E2DBD9D47B8637D27B38B236635D
7B19F8777F37F7D31D6C4B218C17E01FED315C553A1A442831BE22C1D2AD0054
CBD192D625BC70DBE996302B7A5FAB5E48829B2C3C35A02519853B3705360400
DF3AB137A440C62D2E1D927281A45D8AB03B4CF50C339A364CE19E0F89178180
C34403F9E82B8E2CDCA3A8FF942E76F5E88D53F952E5DBAEA8A3> |-
/b <1C60D8A8C9B78FDB46BE4EEDDC2C490849C532F06405048C96FF9492C4EC
977AC5AC94DD658DB09243B4EB25F4FB653DA815B9A79020C0F7B3C8EA2E4961
A2AADFC9272EF386DE00D50FC8C8730E3CB19CD26E97E5F044FDDAA715B76275
4554623125C470834070FD9C203EC0E6F2B3533E879B82B70BF86E1729094D53
57E01F9B4C6A3D72E37B470994A5F0CE35BDE09E43F17A01DB34D5479D12F0DE
B8AA> |-
/i <1C60D8A8C9B85FB151889E4E3DC36AA22051A6F0111849FEF0F95792FDE7
CC8BE5881A93EE76A55B5F4159B1E472D615C919A1D1D1EBAAF01FD31D916857
D42E331903F920CB7D13692CECDE28273F0C85957F478B47BA811D22D07DE12E
39D61785B91F0A7EEB583D6DE6049A90CD1E80BDDB> |-
/n <1C60D8A8C9B79AB808913DA9DD7A7483159F64E97E3AE03BCD87F55B4B3D
D83526AD9709ED731D3E099D07B78F6C01FD0FA727233EA399858604BF100C9F
584F9C5BF5225BA969BB531286958EF0959FB0284658154359ECC49E73BBD43C
3161AF343C7F28C4063A7967F698EDE4A311295F7FA0C362DF09C3DB8D320DCF
DA3A75401888294D598EA25853F9EB456CCE8712E3> |-
/a <1C60D8A8C9B77BBBCB4C16D68E7229AE17D816230A4140387817AB2EB5F6
B2BCADCF297255CC38E627F5E39938F997F1A3E5495CA99469193EB7ACAFE97A
530CB1803CDABECDF9891E80506E177E15F8A210400CDF7D989AB8A93B30B34E
B055222ECE932BE71A378553D04311BF2BDA1F4D1B2362BEA87552B513B64A4F
A1DE10082D779C118CB4F88401C7D1CBA1C5A004D000EFEB90885E70A3D000E1
13082C86C0A6853ACED43E> |-
/t <1C60D8A8C9B83E2DCF6B5400AE4D9C3F415A40CD6E41F7C593E471A07B9E
29592E0502BF8B6BB6CB632A9A9A4D84D09B3853A498E736E988CFBDB7D98431
BBEB16F6BF12BCF764E317EBD9F756F7EF4E8386B6B8791B18FDCE1985270903
36F193369F03A9EC942D> |-
/three <1C60D8A8C9B7A4C863B7699460AE5EA143C0C0229172224804D41184
DB91EAF54935A084AB9AAF0590A72EB93B8E6A6FE2F2C21622ED4271BEBDFCD0
6B9945F88424D37F528BFDF8B40A8D0BC77F7B2F10FDAF175BB1A50D831E3EDA
209F17278379DFA4285196B57AB909FBEB22C3974F641E8EE49F23C1B8F5E757
4510A31AE62DB97D8E30240126BF398CCD928CC04C38BD8B49FB158BCA00> |-
/p <1C60D8A8C9B7883C37346DE534F54387600C820490FB45051CACAF4D289C
D56959E47D273FE5904BBC057DF7727B1E466B0DF492745D39F5A970E89556C1
831286A27850C796ED940954908E9E7A0910A522F71C71E32BFE761D85502730
3CABC9F7A78DE0A72579C52CFD4C77284611622883B262AF39FC6F6CE8B4A023
5AD3F8A207D72CEB8DB58C811692F8> |-
/r <1C60D8A8C9B807CA30E4EFDB1F165D9AD836B5A2668451318441287A3A11
5850DA5755E9120B227C8A79D04355A4333A7CBF240241C5D921617D50CCD585
309B28EF9ED8F08300C6A96920B92AA865465B8E45497B6141B61B829752D8C3
E2C3E0CC2E50A40128D06708D53EB1> |-
/l <1C60D8A8C9B85FB1057357D57B83C93EE67995E2B14229D7234AB3A22E15
A6343644CEC51308938734EA8944FB8ADE1BD4353C1A329ECE1796369112029F
512D6F0CE718FF0204722FF2FCC2B3264D178B7270D5A59E70A5D6A2> |-
/z <1C60D8A8C9B7741C5B4CACCBFD85688EA2870D3537C6A1F8C6CE2CFEAFF8
9EC2400E58780B96000087BBB9D5F711C7F91AF80094BBDD35DD4C4D488B4C6A
92E69DEA0D1E37C9D5C4EDD2F2BB234A03> |-
/u <1C60D8A8C9B7B202A503CA6FB0826BB206B603D11A7369ADF88E22B39BB3
11414D2CF32DA50547A03F3F536662B9755D0B4FBCF2FF517896604AAB8FEEB1
5621DA8E02C984FFD97DA95F6F5FEBEB04320DF87D7B19948870203A1C54E706
66B13F303B05317B13AF3E4FDD2D75BC940B5DCC9686E9A220B4CCECF723> |-
/d <1C60D8A8C9B78FDB46CBCA114AE85DE34DA7290CA573800558B1CBD78B61
E88786332E94F1275E99C44A35256201BFDD539CB0FAF90E27211AB57CCFF04A
308DEA32E95D69069E66A9913857C65B0C7474AE9C03273B11B0D44235745EC4
ACE436EFD27150556C06A9B17A294DD5A7FD89D97478521E24EFFD7C1A5EDDBC
DFA168578BFB7517649B09> |-
/x <1C60D8A8C9B77BBBFDFDF8F094A84BBB2ECAC6F8B7C9DAA888390C4E2C23
D0BE4F87B4A6E64FED2D50AEF8D2AE39906988B147EB0FC90983D1A57B882CF5
CB04ADA87C173D2B91DFE52BBD4A408D9E52848CB46AE29131C7D4B4A7F772E4
0C5B1EE2662B4F9E1BA6E629B17BD06A7522848E6EA9524D4B039BE08D660622
B474E06C00B3416D01F4DF4DC7D94AD91A8EECD5868A759CB556CFCC251BAA6F
673F52CD9B1F1F7A5B9FFF3F640BDAE09A982717> |-
/s <1C60D8A8C9B71DE7A4B6D0D2D859DB61C69FED545A4B3F3F6049CD2A3757
8040159931AF3F7A4D67DF49FB7EC1349A88F9201BFAF8CBB8DB713452882451
C8EEE8334B3471B356000948F350CAD54491B69F6AFF63F465DEE94E41E75AAE
3E32DA1AB0E03B6D0F6BD52F5A071E69403946CA430F57EA6EC7A0FE28AE8604
BE47130153513FB4ADAC7DC45B06> |-
/six <1C60D8A8C9B7A4C8E94864BBCC0C413C0F2266E75C8DADABB926C931CA
9FA3521C36800C5C14BC456CF213DAF8DEF9E6A337FF42C053FE3BE30A928054
25FE491DD5EF49F5CD215DBFA11D6606C8B7D5A4B674B1ABD5C6BC1754AEF14C
FB49F36E56A537A66A7DD0C2320C6FF6C5E53F3D49DDB363665F02E026> |-
/two <1C60D8A8C9B7A4C81FCCFFF80C325057A3A70D1F66A51AF5C52C3E2A90
3C7049D3F135778528DA11FF521D50B957C9BDBE9C242D08049180565F7B759F
CDD2D991B217DA88CB739D942A2A6DC96A129DCCA22A3080AF153F5F> |-
/percent <1C60D8A8C9B6DB89400FE4CBADE6B8B2ECAA091490F0C36B93E651
394B07986B71B4A79E1A30359D56B28C0D57404B333FF02112DA8B82AA63C2E8
EF7FAF44CDA934BF98B21F23910BB7C11DAE61CC047F7D33EBFF2AEE701DB5A5
90F6D3ACD698AA74B7872AEFDEAB3926F35B78B6A0AA5318914999739FAC5A6F
9D2D33016E3C835BA3EBAAEB08BD6A3DCA24AA1CE852B2E52B27E90F590DA226
2AAD1D659AFB43BF935E533978C0E6D8B4179C16885D0E9A6DB3D851428A267D
864FA3765322> |-
/f <1C60D8A8C9B82C91B6CFAABAF8A62CDC75EDB9F900714B5296B85A0BB4A4
7729CBB58D38CE845DF0796D1937B9D0312B696BDA3A1827311CC3EC36F53A37
DED0AA8EF20AAFD2E644225CA5CA0E4A5381E842E6DF4870E3C5426C424B030C
75EF4DE6769B66B1212D0447465215CACCB227071A68309260863C041082A3C6
8E0FF302E2D00E9E> |-
/g <1C60D8A8C9B7B9B9D1FE71A8626A379A939FBB808453508C944DF230E5E5
3851C62AE89BE03DF5E1D754EFF9295DE666689E0E8C933AF9DFA4723B2F3383
0E5F43C3DD91FA6F340445AB46182108955871F7C590FA6DC65BE1F6CB22F39C
FC2BCE71907AE6DDD2407E9C5783E8ACCF57E3605C593F10F73F8E9E9DE4C102
3507B4599F0354A69712BBF30574900F0157E83490C54128312E5420BBB695C2
3545F791BD3395219B96FAB20BAC327E14BA2F0B3C0064EAEEBBE3C819F362D9
49CF202CDB6DA492D6A9AD021471E44E2780E35134AA7C6296910BEA68B3F0A5
5808A469ABB82700D371D32CB6A8322A228CA8A29F792DE0030829D180702E0F
E07C12D64B3A7736753868DFF67F9B788882B21D57EA71DAD362790537338492
FBC882A660789E4951C91A0AE460B1F0> |-
/parenleft <1C60D8A8C9B821B325B1E9DBC21D171486B3253431E71C21A9B6
34798E9F68170340BDC4FDBDC9DB0EB1E62D1788B361290E8EF0EDE61D00B3AA
86834402C72F3D6F091FA8BF74C3F97D58A0D8CD7EAC369C> |-
/period <1C60D8A8C9B8524C23628B23676583FAA5DF139E0854BB006DE5E55
1085192B62C1E2CFDF54BBDE32B97> |-
/S <1C60D8A8C9B7AA91A4264DBFB1908790A0FD2E695ECD44973F9D54DC3517
CDD5B826DE7C8C307E0799C5BE9ECF4D52D2DC343C46B2A3E8CE37BC9A7773FB
A984EB1A7D035749CA75A4E7A620687E3072299EFD42D465D988359F4193363B
6A4453738C09A5A34ADE0738FB7E7436302D4644437E1CE1D4A12652DA0C36D0
0D757FC9FB997D857237DBB74263396F445B338A25175BC504182FDD4D> |-
/four <1C60D8A8C9B7A4C80686793BF42BEFAE5A4FEEB145C9C54B70849008E
F070D17FEFE746DCD08D9BC611DD70C1E295E5E9CFF98C0C070412DE77E60367
2AE3E77AF8155926CDC92E22A47E1571DA1F9535195> |-
/y <1C60D8A8C9B704CCB777DD33F93D55466F3374F3F1C3D753526E2B26AD04
1EC7C518B7F4C61DA1DF9D3746B294AE8043F312330910AD2107762C96426D35
EF270229F9F8A3F98B931CAED3A253CAB7C011D9CE0373D3BF796EDD06AC9457
E3A31AEEBA4BF0F1291E7A8A660675C89B86179EC3FA4BEACDB3D13E852DBB15
5C833D244C24724034FEBF7D60> |-
/A <1C60D8A8C9B7DCE015BC8D33E2E374570A77ED5AF8AE07FF07BA93AD87F1
AB1A2740C23EE95573560A78B9A0ABB0EDD90EC3B46DC366DED7D855AE2B3F26
A31CB0874FAA49129E227C4FCCAE4144307A8AE47351F98EAC0B5B768E14C267
908D296D516DC43B3D20D2A001BEC96B1F8E82> |-
/parenright <1C60D8A8C9B821B325B1E9DBC21D1714AB7E652E3D016C27815
A02A89F99CF19E6463F8ED9DF7AA2315FA5363CC5FF288079A6E3CF4AE2CBA0F
4B62FB27CE54ACC08CF170AF8CEB81EEBB02F97F4E6CF75E409B5B678FD045B> |-
/G <1C60D8A8C9B600E0BB41825E90AB1A4EF7EA190475CE6F308DC85B72D853
70D9CA65A0877EE186454230A915E376E243EEFAA814573AC1A783540AB8648B
96208385E6BAEA30BF4078CBABEB4033DE54ACE2B4F1AC8271FCE607FD99E623
805F400E423D17D0B03DD2A41FA8CDEFF45E51F4E3407C5DE281F5DF0EFE52FE
784A5967DAA55CA25D577BAEAD9298EADA60> |-
/v <1C60D8A8C9B704CCC77FC58EE45105C70E392E5645773A84ECD4AA3331E6
33F2F0D3A07079970D36C6A3744D1A55C85FD334298B27FD2B497B5EDAEB302E
2B8F792205CCD417980202DDEDBFBEE912A59254C3A3F60F570B8D50935453BC
96672D98555305C6290EEF3A5B38F4> |-
/c <1C60D8A8C9B76F05DE3D567DCDAE85D3E5BEDD1B6A71FBB744B9D63994B9
08D69E32B91204F1AE0DD77CD59CEFD687153C29F7FF3A9E00FDA65A03115886
876BEAE5C996802CDF86F39D3D07BC875E37668BC76CAA49DDDE6850A33D08> |-
/eight <1C60D8A8C9B7A4C86368228EC5697E3E4B68F7A468FC37E62E07FC33
8933E5C2D8BAC3561BEF6C5A58DF801FD5027403262966D0BD4ECF318C49DBE4
ABE3803363A51E910A46A39ED1502992021E26577B4FBA622B82A97A7AEC30C9
8139E056B054415EF4A3792DF0006249F5A1291C4D4CA98EF591F793990C2127
82F6EDBC5DA7573674A741E10844235912C2F6F4A09C15F87A8B877C7FB59A82
552A8D87B5B607655AC717B1A420C8EBECBBE04E6B4794F05844417CDD0596F2
C3803AC0F4FDC7652FB5662188F1> |-
/one <1C60D8A8C9B7A4C81FBA7A1F53956AC06DD7FA1E638B76DDAFE4673885
E46687A227BA483D8C5678778FA8CE7D055E75430C68B6896C5635371352FEA8
9FB60006BE6A3A681F> |-
/comma <1C60D8A8C9B8524CA547362366E62BFAC26DF2C3B2E3B9D5156F02DC
901230BBD7A7F2FB8E2F3E2A9CFC877C5F53F0E4C1CB2B83252D05067234ABF4
FE7DFC49E65928B7E2E2> |-
/T <1C60D8A8C9B7E6F0046C8A2C4344AEF56332A0EFC3A88D101498BE08B3DA
E6317057CBA7C80C29E510A1BD4F470C0135B07D0FC6D4B1D60BBC50F89E0280
9E69421DD305721626F29057136512CABDB890BC88724C95CF168E9D22D1BD64
83D558E16D159F> |-
/.notdef <1C60D8A8C9B83C8E5F> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/QOROMF+OTNEJMQuadraat /UGXAAA+OTNEJMQuadraat findfont ct_VMDictPut
/QOROMF+OTNEJMQuadraat*1 
[32{/.notdef}rp /h /e /space /endash /o /m /b 
/i /n /a /t /three /p /r /l 
/z /u /d /x /s /six /two /percent 
/f /g /parenleft /period /S /four /y /A 
/parenright /G /v /c /eight /one /comma 14{/.notdef}rp 
/T 171{/.notdef}rp]
QOROMF+OTNEJMQuadraat nf
QOROMF+OTNEJMQuadraat*1 [9.9998 0 0 -10 0 0 ]msf
76.0101 693.931 mo
(,\)*'!\(*3"'\("* !",!%&-$.'/0%\)&#\)2'*'\('&"8-$0,")
[5.36195 4.45589 3.40697 2.66092 4.39995 5.35887 3.29397 4.13993 3.85994 2.88791 5.44987 3.85995 
3.37797 5.39687 4.37994 3.85995 5.38794 4.39996 8.19182 5.18492 3.59987 5.10789 2.88791 2.88791 
4.65692 5.40787 8.40782 4.51988 5.54892 5.10384 4.85287 4.81889 2.62292 3.40697 2.88791 5.64786 
2.68492 5.23991 3.85994 5.39697 3.59985 5.11591 5.09985 5.30994 0 ]xsh
76.0101 705.931 mo
(\)\(1"'\("+4:56"$7",\)*'!\(*3"'\("* !"30\('*'\('&"8-$0,")
[4.62289 5.29688 5.14492 3.41995 2.78891 5.34988 3.41995 4.83496 4.89596 2.60394 4.93996 7.96484 
3.41994 5.0159 3.07986 3.41995 5.21495 4.38489 3.30696 2.56091 4.28496 5.25888 3.19496 4.03993 
3.41995 2.78891 5.34987 3.41995 3.27797 5.29688 4.28496 3.41995 3.97794 5.30385 5.55388 2.52292 
3.30696 2.78792 5.55388 2.59491 5.14491 3.41997 5.29695 3.49988 5.01587 4.9989 5.30994 0 
]xsh
76.0101 717.931 mo
(9T\)&.!";<"'\("* !";0,,.!%!\(*\)-=">,,!\(1'2?:")
[3.49586 5.36392 4.53989 5.19791 2.64692 4.39995 6.71989 5.00584 5.04996 6.71989 2.90791 5.46986 
6.71989 3.39795 5.41687 4.39996 6.71988 4.92685 5.16684 5.26697 5.26694 2.64693 4.41994 8.16684 
4.41994 5.40688 3.44595 4.74289 4.09787 4.08989 6.71988 6.02682 5.26697 5.40794 4.41995 5.40086 
5.46892 3.03989 4.2959 2.98688 2.75696 0 ]xsh
283.006 693.931 mo
(@-\)1!"+"!A!\(*3"$BB0--!1"'\("C:<6"$7",\)*'!\(*3"'\(")
[6.89383 3.61087 4.33688 5.11893 4.27994 3.89993 4.92996 3.89996 4.53192 3.89792 4.29996 5.25885 
3.19498 4.03995 3.89993 5.14786 4.25287 4.29684 5.30286 3.70688 3.51486 4.36295 5.13992 3.89993 
2.78793 5.34988 3.89993 4.89996 2.39194 4.69495 7.95984 3.89996 5.01587 3.0799 3.8999 5.26099 
4.3559 3.30695 2.56091 4.29999 5.25885 3.19498 4.03995 3.8999 2.78894 5.44986 0 ]xsh
283.006 705.931 mo
(* !",!%&-$.'/0%\)&#\)2'*'\('&"8-$0,"\)\(1"'\("D:46")
[3.27795 5.29688 4.28195 3.30997 5.28793 4.29996 8.11185 5.08591 3.47189 5.00687 2.80392 2.8179 
4.55695 5.30383 8.27985 4.41989 5.44891 5.00385 4.75287 4.7179 2.52292 3.30695 2.78891 5.55389 
2.59192 5.14191 3.30997 5.29596 3.49988 5.0159 4.99985 5.21194 3.30997 4.62289 5.29688 5.14191 
3.30997 2.78891 5.34985 3.30994 4.82996 2.51794 4.68997 8.05887 0 ]xsh
283.006 717.931 mo
('\("* !"30\('*'\('&"8-$0,E"8-\)1!"<"!A!\(*3"$BB0--!1")
[2.78891 5.34988 3.58994 3.27798 5.29688 4.27792 3.58997 3.97794 5.30386 5.55386 2.52292 3.30597 
2.78891 5.55386 2.58792 5.13791 3.58997 5.29697 3.49988 5.01587 4.99988 4.97696 2.69992 3.58994 
5.297 3.61087 4.3779 5.13791 4.27795 3.58994 4.92798 3.58997 4.53192 3.89789 4.27795 5.25888 
3.19498 4.03992 3.58997 5.14789 4.25281 4.29688 5.30383 3.70688 3.51486 4.36298 5.23889 0 
]xsh
.5 lw
0 lc
0 lj
4 ml
[] 0 dsh
true sadj
76.01 668.358 mo
481.011 668.358 li
@
76.01 98.1801 mo
481.011 98.1801 li
@
76.385 665.651 mo
480.635 665.651 li
480.635 100.555 li
76.385 100.555 li
cp
false sop
0 0 0 0 cmyk
f
gsave
76.385 665.651 mo
480.635 665.651 li
480.635 100.555 li
76.385 100.555 li
cp
clp
.75 lw
76.01 665.651 mo
481.011 665.651 li
481.011 100.555 li
76.01 100.555 li
cp
.613886 .51693 .497383 .20087 cmyk
@
grestore
.699336 .676143 .639429 .746822 cmyk
%ADOBeginSubsetFont: AKJBAA+OTNEJMScalaSansLF-Bold Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2021 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /AKJBAA+OTNEJMScalaSansLF-Bold def
/FontInfo 8 dict dup begin
/Notice (Copyright 2002 Martin Majoor. ) def
/Weight (Bold) def
/ItalicAngle 0 def
/BaseFontName (OTNEJMScalaSansLF-Bold) def
/FSType 0 def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 32 /P put
dup 33 /t put
dup 34 /i put
dup 35 /n put
dup 36 /e put
dup 37 /s put
dup 38 /uni0020 put
dup 39 /a put
dup 40 /W put
dup 41 /h put
dup 42 /o put
dup 43 /r put
dup 44 /A put
dup 45 /l put
dup 46 /v put
dup 47 /d put
dup 48 /F put
dup 49 /f put
dup 50 /m put
dup 51 /g put
dup 52 /parenleft put
dup 53 /percent put
dup 54 /parenright put
dup 68 /D put
def
/FontBBox {-87 -266 1126 863} def
end
systemdict begin
dup /Private
14 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-19 -0 465 481 660 672 729 742] def
/OtherBlues [-251 -233] def
/BlueScale 0.03963 def
/StdHW [68] def
/StdVW [99] def
/StemSnapH [68 85] def
/StemSnapV [99 153] def
/ForceBold true def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
25 dict dup begin
/P <1C60D8A8C9B7EF32570F0641E9FE429257CFB92A06A6E0390F4C8834B0C2
B6F50AABA50DB34FA054B9BBC9773221DCFFFF11A060356C66ECDF6E82777D71
3EEF38A84B38044863449C3512084323386D8C91E7BE1DDD02C05C2ADD01E824
63832B509EDBF71B50A74D77A07839E186CFAD0A61> |-
/t <1C60D8A8C9B837768D63E86F89947615002D1D534FE5340172B5E7E8C508
A7C907C72041E8FAAE04E8209DF58135738131257CB3AB01C0013302786EF0ED
F9D19C85902FBF4B84252974EF9B9D3D25435FEDDAC0D34043> |-
/i <1C60D8A8C9B8757430E284F9970999781C5502C61A6EC09135EABDFA454D
E4B886778C8E83FFEB7697E73F8064250AA0218D94F3798F803EBA8E025C73> |-
/n <1C60D8A8C9B79AB82EB3214CE87E0224ACCC10AAEAEAD53C8E9BEE38BF96
B97ABF36D8E59574E4A882C2B35FC73DFEE2CFED84D385A0CDE0326B713A69D3
6139EABB2E227976F02D3F030EFC> |-
/e <1C60D8A8C9B747CA666CB81935495F9FF06974CDFA2584DDD9D0DCAAE9E1
1CD64B2E6489BE1BEEB4BDEE8FFCC13379B383C4814011D8E5A8422E2BC53CD7
F00FBA944EFA582F9879AD20B6B8652293F160BAFB7A09068E38D7F4561D17EE
5E68333A201973B91F93A13BA26FC6B63042DA8196A02A0AF456219966B6> |-
/s <1C60D8A8C9B77C89D82F317ABE3C965ADC4DDD61F787DF155ACE8D19BE5F
A167D08C39CE8E621E97FBA3A55A72FA508C5214B7F4C77AD98EFB52049E3D05
FFC0DE74AC018476766CC7B4F33EC6412CBCDC339D3A4F00EB5C2A06F1680988
15CDFECE33E2116B10EBB42D5CDED8C1BFE1233774A70F62702E0BC122C3B3A4
48807679C1E72A8CFE8CE02E55AC6C28798D63E216A2C74F> |-
/uni0020 <1C60D8A8C9B8707C25> |-
/a <1C60D8A8C9B75F2FE9BD34B81413A30A3C58B1D67A232FBEDAAC07C18CE7
E2F72F5007BAA74100FBB880B0B141B4C083650F0C72B7B418C6C63AAE0424BC
B8FECA5071CCD282DFE8E2A75E0DFA4B3CFDB53340D5DB172D6E7D8292C5CA46
9CDF619E6CDE6515C4B5642F28BF509DA56268B05F8FFC3ADA5F2988A1E0A11A
175D7DBC92489B1B7AEC0F25159AACD401567717A4F91AFFECD75041FB1DEF> |-
/W <1C60D8A8C9B6951FFE871094B3D83F1EFB042388B79F14168AD3807F755E
CAE92FEEFFA2E40DFD77BA133F53B4E326896D7ED565BA3753349A8E24D197D8
0AC214971DD44CC5> |-
/h <1C60D8A8C9B79AB82EB3214CE87E020F014519EB603FF3CDB5129511822C
83CF3444F8F8116AB9E369F141CB57AB8AD3ADC204E9865DE1EDA10C3115EF1F
8E3F6E25BFE1FA64BA089234AC3619E8932AF5> |-
/o <1C60D8A8C9B7B71AC568A63F3CFF7D4D66C5502E744E0A931D64B92660C9
71A2C855DD0E722A83FF8FB1ACC3C9A4A49BFBE004B14D2C20DB469C4A9F6380
97AE8F78B23F0D7DBDE479F084C79C9D57E06BFEE0> |-
/r <1C60D8A8C9B81BEA12BEB4F9F49275236C5DD4DB4718F8DBF9CB53DFB51A
B2BE12470C7DB751ACD85993F6563B1A829361CB37DE62CE7CBC2BDCE9361DCA
DE49E47C1E71211B8D5F9F9B8285> |-
/A <1C60D8A8C9B7C8C12E1D228C54521E8CD4A85CE465D2E5D79F8947855875
BF4A7A8C9D88C1472E984C97DEFA79DCB03CA39C4F94E2318EB84D2DCEFEF1E3
72> |-
/l <1C60D8A8C9B87DE02E7433453FBB858C4D38B0BFF0AB4DFE97B229C1D0E9
16D447> |-
/v <1C60D8A8C9B74B0CC6DDAD3636083898B9EFDDB2CFA73C86BE9FDD5E8D23
2286937D8A09201D72A256ED0FE1E558019FDF4A> |-
/d <1C60D8A8C9B7883CB26149D4871613C05123F8EAEE5D847EAB21A92BBA66
A85E19CF719361538F976A7FBA2EF2DCD1653122B654906F32EE8F50AB4B496D
D70D9E365A7830A944C8988BD65D150280DCA016D760F771AEB5AD617D75827E
B520117192C9EE9A096D09DE04ECDAEF3005D7E37E831AF6E378812F> |-
/F <1C60D8A8C9B7B14CE594518A684A103CE24BD76098BE9466621CFDD6A70E
5FF4126143AE3C57A98C338DEEC07E33D22641939E4A979A37> |-
/f <1C60D8A8C9B84AC09F3C4D09D23E45C1DA260767E5662CCF3EC1B401C8AF
84ACFB3B0603523E3DD54F87DC42C9129BF4AD3A5A5D9D80D76FD1B3C512AC08
5E6D9438D6FEA74F74A2A585029FB20FEA381E0655625C1521C2046726663385
0A2864B8> |-
/m <1C60D8A8C9B6B5EDBC7BC276077D0A0A34EC9986767E5132CDE539AF7139
3A7B89BCB421914E304A0AA33D0BE4E08F3206121F3CFB3B739BAAD098F24F17
4CCC8362FB014B198F641EB6C528482EDD7F468EE0CC956F62855E37D322FB48
048803F34012D129C780FFEC16501EE898366426F47A380CBE11C5D6> |-
/g <1C60D8A8C9B7A086091D130B602FE56972E92DC99D7019FF0A429F8A5D0E
567E3951A5F69B5DEDE2885A3F27B0A55318A1AC57EE2A8432B218B7736AC065
803DC63BCDB6CC5F20811A575B40A3554583D8D75E8574532D59E660979400C8
34DF6E93E0A4ECEE128FFD81EF78608B92207E2DBF5CF39A8D3E5A865301E9DD
CFA6C4B94478BCA96F90E3CB63701E6EBF4A3D0BC232FAB40AB9143C80172EFE
53B3AFA31AD07575BA600E08667679A095436A28CEC12EF1B4F36F6C75AF9B1C
35F745B283CEF1AE177AAE58A968AB3B80AD3E0C6175B003D3B48BE6F2914134
159E1547> |-
/parenleft <1C60D8A8C9B837760832B2F5A59E2B9AF3B43AD5E19E518FD9CD
205EFD1512B7988E7BFA43DE4758F40C60860CC0A346A0BC8EC0C6B07BA50921
D706588B895AE6176401DAA01FCAB6C7FCFC2435774266A5F48C8EA939AFFB> |-
/percent <1C60D8A8C9B687C5100AA1EA8FD66521D33176CA971669BFA0C568
15E0DD70F149A1B2D271E9583655D920E425B5D0BA5BF59B94C8168286E8C7DC
15FD17C0A1F0B1DC858BB41D17A68E96FB1C8C03D48269A191533A72A9C124BC
D5FF0D5B508D653D5DF3DB2A55759F3A020AA14360D1BA879C5F3B35FC5E61C7
7C5D196C8228870C4CFD20ADFDECA2F27A054749BB852C49C5797BA72C3D> |-
/parenright <1C60D8A8C9B837760832B2F5A59E2B9AD874B9344A77D5BF3AA
4385B2D2624FCA216E35E60B3D3A17A36DA5DA0F17959C5EE51058C0BDC383F6
0C6479FFDB207FCDDF83A93473A2EA933B77C906640B23CB291927CC405D3E10
D815D> |-
/D <1C60D8A8C9B63ABFAD7D6A26D78DF2F6151E002D7B7D1483ECB0D3EDBFE7
1C0CBFA3DA9EC2377807A9A01BB597D98DC7DEB8B81A0DD1AD7CB575A72564C5
AF55A234831BD8AE8DA10A605784FA287838CD67CECFAAF40B02F9C57902A09E
CF894E10B734954C71A497> |-
/.notdef <1C60D8A8C9B8707C25> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/QOROMG+OTNEJMScalaSansLF-Bold /AKJBAA+OTNEJMScalaSansLF-Bold findfont ct_VMDictPut
/QOROMG+OTNEJMScalaSansLF-Bold*1 
[32{/.notdef}rp /P /t /i /n /e /s /uni0020 
/a /W /h /o /r /A /l /v 
/d /F /f /m /g /parenleft /percent /parenright 
13{/.notdef}rp /D 187{/.notdef}rp]
QOROMG+OTNEJMScalaSansLF-Bold nf
QOROMG+OTNEJMScalaSansLF-Bold*1 [0 -7.5 -7.5 0 0 0 ]msf
161.528 254.055 mo
( '!"$#!%&\(\)*&\($+$&,-".$&'#/&0+$$)
[-4.16998 -3.57001 -2.3175 -1.85248 -3.51001 -4.08752 -2.3175 -3.35254 -1.875 -6.48004 -4.08746 -3.87006 
-1.875 -6.47998 -3.51001 -2.52753 -3.51001 -1.875 -4.46252 -1.79248 -1.85248 -3.48004 -3.51001 -1.875 
-3.57001 -4.08746 -3.98254 -1.875 -3.91504 -2.52753 -3.51001 0 ]ysh
170.027 247.868 mo
(1+*2&D"%$'%$& +*3+$%%"*#&456)
[-2.15997 -2.52753 -3.87006 -6.23999 -1.875 -5.33252 -1.85242 -3.35254 -3.51007 -3.56995 -3.35254 -3.51001 
-1.875 -4.17004 -2.52753 -3.87006 -3.80249 -2.52759 -3.51001 -3.35254 -3.35254 -1.85248 -3.87006 -4.08746 
-1.875 -2.31757 -6.375 0 ]ysh
gsave
76.385 665.651 mo
480.635 665.651 li
480.635 100.555 li
76.385 100.555 li
cp
clp
.75 lw
75.885 343.53 mo
480.886 343.53 li
.613886 .51693 .497383 .20087 cmyk
@
grestore
%ADOBeginSubsetFont: AKJBAA+OTNEJMScalaSansLF-Bold AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2021 Adobe System Incorporated. All rights reserved.
systemdict begin
QOROMG+OTNEJMScalaSansLF-Bold dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/B <1C60D8A8C9B7CC0BC580DE9370F02F41F7EB02AA8329948C0C14CAFA3187
08C63E4E76C9984DDF0198257640C1B4FC5415164E5258CD0A8C105FD2A24156
6040061A616EB4FA44530C188F3D8238C2F6B4CA9ADB6F4373F515F07716558D
2E56D6360AE3A2EE33B72CA69F7D98E7C7CBFF94A4BB363473D831D48440F47B
25D5D3021C3E1B050A22842E6BC4> |-
/hyphen <1C60D8A8C9B8567783A2BADC132D07D3E6AC3496408C7E646DD0A12
5AAE63A590C> |-
/S <1C60D8A8C9B785CB3217D9EF0CB70E3CBEDFAFE0CC1B907075726FD58E0D
6E7D332686C4BAAD69F44E38B3C1F22DF67E76D9E865D07C06956DF42998DE61
CBB44661FFC060440E84780D6C6A557F9C330BBB6B143196AA9A3F7E756AD388
B94444EE0132C8FEB5C943452639F0A463BD34E38D9707ED25E0DF1D099E44FD
E8FB514B82B06113CF904AA94E614D87B545944DB94EC2A1747A13D25F43E84F
21141709FE02DAD260E8E7D0> |-
/u <1C60D8A8C9B79AB826521429B83FE27225700BF73B711FBBC7B84B41F74A
8343B2C344CEFF81FADA62D9CB9AA5D02A8E393C9FD53AE43C8CB9DD023190C5
9A5C1C81BF1542336BECB30DD75D> |-
/c <1C60D8A8C9B77FE247B3C2D71D55119E552F571F176A4D70680F96437405
BD5F878C1899B018335266567A9160E27AA7302086F9EF59EEDED4C648A08D72
7771B02D5DD38B23D576C35C2FDDAC66F96654357D1FEBEE0B1B4E89BB20A863
C6D2A8> |-
/b <1C60D8A8C9B7B577F9EAE6410E05DDD2B3778155841E7B37A8132F0FB5BB
549F9FEEA14758DE61596FC1CB17F5E638E4B3914A85371555089946CD741F6A
1B3688FCD8D51D414536A7AB3F8ACB98E5548C87ECED09AF3CDF387E9F0FB0EE
1E02DB67AF04AD0258D73145AC0AEBA187> |-
/p <1C60D8A8C9B78181CC04432F2B14D54687C3DE3019C06F7A73A586DC81BF
22F8074008CAC5C23475414936838ADCCC855BBCF8FA486C1F10C3055F95661F
9413DBBDF5071A16EFDEA794E592F9CE58EBBDB0E37D202CC9A396748A1F98F5
054AE039C6204730638F0FA27E2EF388072FEB81A4F6B671BD4AE68116E00043
4F2C5F10AFEEB5> |-
/period <1C60D8A8C9B8714DA1D41C0290867CFFD1C868CAE92F8424F9859AE
F55217843455E1D36DE150940647F> |-
/R <1C60D8A8C9B7F374F526834C2222A8EA72D79C103A486E7CD6F701375CD2
E9C4BEAE58084CFB1D3C869308D0D42C46A2F2DB873D3099701BE369D7A41683
576804209BC46FBAB83A93A9FAFCBC90A1C514F8FC997C77CE212C8B22774712
EE77CF7D0C9C24DEF31AA45A23> |-
/k <1C60D8A8C9B7489B4609F0C42C3D4EF973ECBE9DB74CAFDF969C1875A9AC
F51704207FF2C54C3C1A280B709DB216639FE02ADAD1A38C5094FC351B59F2B4> |-
/N <1C60D8A8C9B6EA91B3C151BD5F3AD9D5CB6FFE48C53678D3303E3879CE71
60E12D76977DC56571B09D1C322AC50BA2D9B8C0D109CD544DF26CB269CA884D
2A9EA09C52B8AB7328B8401F30C3433523D0FF8A7D9209DF566DBA5E9471C8F6
70FA797C0B43F022> |-
systemdict /gcheck known {setglobal} if end {end} if
end
QOROMG+OTNEJMScalaSansLF-Bold /Encoding get
dup 55 /B put
dup 56 /hyphen put
dup 57 /S put
dup 58 /u put
dup 59 /c put
dup 60 /b put
dup 61 /p put
dup 62 /period put
dup 63 /R put
dup 64 /k put
dup 78 /N put
pop
%ADOEndSubsetFont
/QOROMG+OTNEJMScalaSansLF-Bold*1 
[32{/.notdef}rp /P /t /i /n /e /s /uni0020 
/a /W /h /o /r /A /l /v 
/d /F /f /m /g /parenleft /percent /parenright 
/B /hyphen /S /u /c /b /p /period 
/R /k 3{/.notdef}rp /D 9{/.notdef}rp /N 177{/.notdef}rp]
QOROMG+OTNEJMScalaSansLF-Bold nf
QOROMG+OTNEJMScalaSansLF-Bold*1 [9 0 0 -9 0 0 ]msf
80.5339 354.35 mo
(7)sh
QOROMG+OTNEJMScalaSansLF-Bold*1 [7.5 0 0 -7.5 0 0 ]msf
90.9677 354.35 mo
( +*3+$%%"*#81+$$&9:+.".'-&,;;*+/"#3&!*&9:<3+*:=)sh
QOROMG+OTNEJMScalaSansLF-Bold*1 [9 0 0 -9 0 0 ]msf
80.5334 111.628 mo
(,)sh
QOROMG+OTNEJMScalaSansLF-Bold*1 [7.5 0 0 -7.5 0 0 ]msf
91.0302 111.628 mo
( +*3+$%%"*#81+$$&9:+.".'-)sh
%ADOBeginSubsetFont: ELRBAA+OTNEJMScalaSansLF Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2021 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /ELRBAA+OTNEJMScalaSansLF def
/FontInfo 8 dict dup begin
/Notice (Copyright 2002 Martin Majoor.) def
/Weight (Normal) def
/ItalicAngle 0 def
/BaseFontName (OTNEJMScalaSansLF) def
/FSType 0 def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 32 /z put
dup 33 /e put
dup 34 /space put
dup 35 /a put
dup 36 /h put
dup 37 /t put
dup 38 /o put
dup 39 /r put
dup 40 /s put
dup 41 /parenleft put
dup 42 /f put
dup 43 /percent put
dup 44 /n put
dup 45 /seven put
dup 46 /comma put
dup 47 /endash put
dup 48 /d put
dup 49 /i put
dup 50 /eight put
dup 51 /g put
dup 52 /p put
dup 53 /parenright put
dup 54 /period put
dup 55 /P put
dup 56 /less put
dup 57 /nine put
dup 58 /five put
dup 59 /zero put
dup 60 /m put
dup 61 /six put
dup 62 /four put
dup 63 /one put
dup 64 /b put
dup 65 /l put
dup 66 /u put
dup 67 /C put
dup 68 /x put
dup 69 /three put
dup 70 /two put
dup 72 /H put
dup 73 /I put
dup 83 /S put
def
/FontBBox {-91 -262 1000 868} def
end
systemdict begin
dup /Private
13 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-19 -0 453 466 660 672 729 739] def
/OtherBlues [-256 -239] def
/BlueScale 0.03963 def
/StdHW [65] def
/StdVW [100] def
/StemSnapH [65 84] def
/StemSnapV [100 153] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
43 dict dup begin
/z <1C60D8A8C9B74F361EDC7ACF9C0D575CE8A611D6B4EAF001DA91FD48FFBE
4C9FAC658326A268B9F2B2E35049D82DC2> |-
/e <1C60D8A8C9B746F422143731B0AD66B57FA06C8965FD176FE01A545807C9
4563C27363FB940854F6B8FC831167441957AEDBDA2C2F2FFF453B50BDEE007F
017356A7223907C43DA6F79EE8461A873DDDC27AAD135486BA6CF23D80E58C7A
C544> |-
/space <1C60D8A8C9B8707C25> |-
/a <1C60D8A8C9B75F2FE99BCB794718D9B23DCB3DB095FE024BC7375623AEDF
3760A8840F83EDA5A0EDDDBB008B8CCDE7C1F88B31E1D6D6A0754109DE0AF069
A94DCFFFECC2496FC1340D3B7C17D69E9FB58F6EDD08D61571B72CE8C99F07A1
319CC0271FFD7B93502C32175692CD2208DB2D9706399C8A7ACD4179DE26C113
F9AC86728343C52DFC7DA4A0951FC5B99CDF> |-
/h <1C60D8A8C9B78324E59C731ED9D69337768A5B0909C4D5D6BEA825019146
1EA2FF863AF387A253012113FFB0FD418320A97A3115B66F06D132A499B472D5
7383D2BBF4AD374CAB1691F13B85F58BFBCCC1F0F7AD1E27FE5E4792> |-
/t <1C60D8A8C9B837768D2AF3EC776033988B8FB72EC1A84C735BB7E3E1024C
3385B0CB702E6C208207D6D0794537AA96F32C45A439808400F0F3A5F4F0A670
28D21FDC65992229A3DEEEEE826EFE731AFFA46577D9BC3674DFFD4C20D098> |-
/o <1C60D8A8C9B78699EBEF3B5D173D5F9B2AE2F5B27A51BDBDD21AAF194955
82FE5F748A6E59C666B1B0C2612E21403A6BA7484AE019142BA3F7EC3C97D540
05EEE37AC2BD246F50A6C31457D6634CF988FCE646F6> |-
/r <1C60D8A8C9B81BEA12BEB4F6BCB96270B6CFF7B979ADD77A26CE8BB0241A
AF8AA6EC607DB29A452D1478609AC2CD08A9744A403DFA58EF1A390AA1D4F64D
D0FC84> |-
/s <1C60D8A8C9B77C89D802E6A819D42E4781F62E2D3FC5A5E6D70C663DFC4F
EACFBA8FC68EC681B4EC61591D848EED5E0739DA54358872E5D9D5E228EED265
B8DA1456A52C477056678FD92660B0D32F095ECF2C2035D6F1475995FE792F60
307081B95CF3FCAA9F4B8F476E6469DAEAB88B62CF712DA94B694BE636EABEA2
2C9F7028FA86CDA71F01E85BF6F0775447BD04FD62BCF1C5218A8A> |-
/parenleft <1C60D8A8C9B801FDC7E9B83D202A982D8F5000B1F36F0FEDDC7F
18AE463B1A9408F29F40831941651487CB92081D4AADA41529C9D42D676B11F5
FB82657ED9EE03733B70FA378FC911F6A637484553> |-
/f <1C60D8A8C9B850A9AC33698CD3DB2103C8024DA71E26036FADE44AB5DA3E
11F724B1D8E96DDB505F5F920161A8DB091686D932C7673797EE7206D9BC4E03
43B0ACECFD1C01B45854CAB3B5B31C29F151E704> |-
/percent <1C60D8A8C9B687C5101A8609A416FF1E886BB5C555D3DC9B9EF164
47B655B930F504AB8C8279540AF59F723622FBA044B39275EFBC1894898C7E9D
F6980ADBB53E77B101A6F7688D273C0581D24108057FD45BF427DE44993AABEA
A9900411107E0266C044B4AE34BFA66A4DBE0D494AFE3B9AF0EACEB8BDBF4CCE
358066E81E292A977D93B726B8BFF7279A662076FEEFE8D17F7DFF5167C0> |-
/n <1C60D8A8C9B79AB82EB3214CC4404FFF071C136B61806796CFF266D11290
9BF87FB1DA8DADD8128E14B40A1D95E56EC041F0014D211A24E6BDBC7B8BB912
6F7B43B4F18D4B3977F7F06ADD475BEC4574FEDCA07E60> |-
/seven <1C60D8A8C9B7A73D303299B8DA3668B6994A1B156BDD6491DC1D5591
0FB78FEF72F5B6D28BDDC8BAAD4366F1CFF706A899782C7653A668> |-
/comma <1C60D8A8C9B86ED9085AC2ADC743749F463263303BA9F350C517B08A
23CD81ACBA8CCD6FE7CB86A0DEE5B69C6E7D617734B015D03E48D30B3CE4F6EF
98492CAA01F1B4A0> |-
/endash <1C60D8A8C9B7A73DB941972DB40EEFE94230E22271F552B2B5C8> |-
/d <1C60D8A8C9B780B390D154A05344F6D63E631982C17D7BCA316F72AD6574
1E7C7BA745036D9D28EE66B1A7D31D53D447137F9FBF695770353534952ECBCE
5C529B2E650554E75839EFC397E826FF6CE67C16F6CF00248123C3A98C491B20
4D9D1F1614ACCDAA0D49DDF5CF77155FF5CD> |-
/i <1C60D8A8C9B8757430E284F9EA0655525E3E3189D49822F883C98509396D
8B07F0EEF0F549BF06AE7843BE2FEA7B94FEF513663DB10285E9C528> |-
/eight <1C60D8A8C9B7A73D365069E828AD16F017AE247FC3CE9D79D58652BA
AEDA8B5DE35D485E6F1D9818FEC37C644B62F380B4455B9FB4342A7BAAE965A2
914B22E177195AC04F7AF279A69FCCA2A7F1964361F6E5D6F2DF210E272D5DA4
4A6ED643B7E80C59A3D1178F921C76BC9EBCF0F80350D72CC3F97183F44159FC
572DB90A710F23384BF02C6E5DA723E32D9F68401D37ED7FE36E41EE80E1A02C
9111368DF2FDCE> |-
/g <1C60D8A8C9B7A086090BB83A446A8BC515CDAAFE449B0895F1710B2B2D71
C594BF62A3A0678D38FE9E9027A380BE8A030E0E2BC6892BA375B0AFBED5AABF
4E5352587E3D9267B065A7B346FF1469A3410C12C48F8B545352F087D0456809
3B8C80B5E722E705B5A66C63568F8F4B07802C38F220FD939161CE07800552F3
7803A34F3A0F2D35D17CD6882746ADA5BE7BD4B6FF9507A4B71022191F1AD774
BC1F5D83CACB4C605AC54480FD0215C1C1A47AE08E1F461856B7167810DA4E89
39499F7CD850BC321E3F68CADB856C93> |-
/p <1C60D8A8C9B79C5FED79EC16939BBA4BB5F73B425EFBD025C0AE7CDBD3EC
519267AEE87D85E5A051EEA47CB846950CE1C210660C3A210996EEC3836F904D
4DFCC7CDD225F186078B68E1E256DD50D871742E25BD51CC80FCD799C66380B4
E805144D9053922C7D0CC6CE788143B74E27F69414152BA9BC> |-
/parenright <1C60D8A8C9B801FDC7E9B83D202A982D8F743BF89361FDB25D9
E6D2D9F24E16E391439DD303227345638E4C7A326090FD5D94AFA9DAF35991E6
DF2BBC0F0E1155246E5742A8A71F556C069885C758754EE> |-
/period <1C60D8A8C9B8714DA0A30EEF65BC7AC6486E75EAEC0F42C2FBF5381
969231085C854E76539FF93A09F86> |-
/P <1C60D8A8C9B7EF32570F06411C6E7E844C59E96B1BE2BDA1C8EB317F6EBE
3D0B3533F638FAE87DF32130E2BDCC8DCD2FF53BE8723C5C11F8E969B1A89D80
9F6F3AF2169AF60BB7400B51FE5D7A1EE0630A3D92E154E5AB7CD57BA3AB28E2
7ACA17A590DE3FDCF7B00A46A2B43DECFCC90307F82DF7E4> |-
/less <1C60D8A8C9B795A0CD27F61D26C4C92EE1806E749673E065B15F60210
4B017E8C754893BB2> |-
/nine <1C60D8A8C9B7A73D329FB39831F1863EF3E5C0239CBE21A078E783EFB
017CA259FEEDAF6653621DE2D22F06AD4B0FDF3F60EC1D722ABB163D47C09D8B
797BDC921DBA575F779C74566536B4D77B5A06D3CC55C2744E85212CE25BA9CA
D4C382A38E7C81F01A19C3861E19BA0A68331C9934DF9DD4A0F9FF8249AA1663
940A3E2E37531D34F27BC> |-
/five <1C60D8A8C9B7A73D307AA6D1C7A2BD3DDA15F41062C6338A202A63B0D
DD5BBEAA25F48A20C83A10858506C96FFAE016ECDC4C223C3717013B5B5446D2
6EE6DE4565F288627B31F3F4FD94DDF6EB675C076271B19DCD57A7FF31093CF4
84DBFF70F42B514E74C330FF3BA3792A2> |-
/zero <1C60D8A8C9B7A73D329D14FCF3F86B61018AD622CB2A6F81994C86277
8A8D22B0A541048124F32CD0C271049E2CD8CAE38920DC2418667A5AAE9DEFA7
A0C55384500824C500F39BD9926713BC5022DABDDE4AB0F9D2054A13DAB73DA> |-
/m <1C60D8A8C9B682CD3C26D07D037B0856B0B13F735B8DF75300E6BDB11621
6883480DA8F8A7A06862083C33AB906820D081E04BB0509E74A2BFE22FC25F96
20BDC727CE0FF12662AF859D6ADE37017D17E7323D61A4B9F5A8BE63F70B73B1
C11AB87113CF85170D94AAC59A6799508FFC1D3F20B1BD29FB4FDBBF474B422D
CCD47FA9CAE5BD7DB522AC98A695D3> |-
/six <1C60D8A8C9B7A73D329C477DC279DF5AC6017A3165A92BC808E4B04DC0
B81925C5D2FC978FE7C675164EB9419FCB9F6B8D18847969256B58A35BD98B1C
6E43B1A70E7C5B9B691E2180BE10817A54E6539284802DC7514C6A94E899B30D
E3EB8C2B3564C42A9E9452DC8B7419D1CE7689C4FF3F3D1B77544956C0C7678F
9FED34D3D0933DBF8B598670> |-
/four <1C60D8A8C9B7A73DC54C6E607F7C4D67C0933337346CEE7C9B04D3DED
2254BAFB0CA1A45D880F001E8477782B815802F588F69544E5C81D4835F26E15
3A1075F832A40CE53> |-
/one <1C60D8A8C9B7A8F2507B2FFCD4E2287A18A2559A548A851D9C185A0C63
E3BA53984D32DBED411ECA31301441F160727B1E7A4A3ADE> |-
/b <1C60D8A8C9B78C666A09D64932172B6842AA712642636884344F524B5D82
B7C34E2B7D1C0A9CC570D9E4A40287C03B307BAB6D1F4901600107627507503A
2E762A169F6068C52BFFCDFA734ECA98807D663187A80531DD9D246B6D8F898F
CF07A1F22DE928B083A83CC571171F5C2888E2E7806BD59135E7E7F34569FFD2
8A2CF02E> |-
/l <1C60D8A8C9B87DE02E7433453FBB85961CBBD23F858BACEEF0E421287666
0C> |-
/u <1C60D8A8C9B79EE3C651F6257DEA8DB96BA21874C38F828AA0DCDC84F721
B178563437CC5AAB46020806A8F1B875C2FE234F16332F0372DEF174DCEDDCB1
EADDD31FF57BF0> |-
/C <1C60D8A8C9B7DE87584C888D0E89ACEE3E883324AA38F41673275C5F75C6
542E2417A48F5DB7058AC8D7A9545CB29E17DE5331285A35F00E4498D1D307AB
0B13E3EB94A17336A8A400B243B1320EDEE54EE7D6731D94D4726C8538D2A2FF
E7D3FE81A13187F65226> |-
/x <1C60D8A8C9B709C4578AAA4DDE998487E00902EE735E4469F0DC815700A4
622636B3A385B3DEB7D611DC6CB247180727FAB7B88FF93FA1EADE84ED6FEC15> |-
/three <1C60D8A8C9B7A73DCCAA7560D9DD355DBE55BA61EF19696866883BF4
B3A3A84E7937C63C86A8142801BF6CA993182307398545529684737A8C70CE34
6B25925EB00ADB672544EF7F8C74F9D671EA2995243D65D5244E5CD22A08D9D0
3742A69914C3450BB609C3F65A22155053A51CD349EEEB55A94CF40F3FFE2434
9BD9D1CD669829605C> |-
/two <1C60D8A8C9B7A73DC5052F0FF9D09BCCB03D270DBB2D3F0BB4AD0DAF65
EC1B34D3B1E4EA8A2517E41311E8DD9D17F6A0B0506A3C298E35A523922FEEBF
683058180A006AD4B54F7D7DC4A38254942AF4F3A5FF69059FBA4618F88CE4E3
0928C8067A2F9D8C5F32B28419E3A5B8CD8D> |-
/H <1C60D8A8C9B6F64743DB207F7EDAD92B2371DBAD860FB3A4A6DD4C33DEA6
6C5A3A181C1F15EAB72F200C2BCB17A7497B1C9CE0AF2A8F6F7B84EFCF0E307F> |-
/I <1C60D8A8C9B83E2DC55A9902D9F36425077F5F89CDFD05478F55685F77C7
0157> |-
/S <1C60D8A8C9B785CB3237A349F66779C001A537D8680E1DCB320DE1E6C4F0
BFB5D04C92DE7A06288764A65C60C0235088AFB4FD12284B576E8CAFFDE4C471
C6D520FDFFB65C2D2CFD1FD3E48780B1D8D693D85F3000118E7886356AFAD70C
FEDB12DC8B78EE8CEB5F41B67534E84337E3EFC71898CD213708DC96CE0E3FBE
9599079DD9B4C1FA56D0B192AEE4293B432B10EF4C8B9F2B3FE6FDCE6A3683C7
E7121E> |-
/.notdef <1C60D8A8C9B8707C25> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/QOROMH+OTNEJMScalaSansLF /ELRBAA+OTNEJMScalaSansLF findfont ct_VMDictPut
/QOROMH+OTNEJMScalaSansLF*1 
[32{/.notdef}rp /z /e /space /a /h /t /o 
/r /s /parenleft /f /percent /n /seven /comma 
/endash /d /i /eight /g /p /parenright /period 
/P /less /nine /five /zero /m /six /four 
/one /b /l /u /C /x /three /two 
/.notdef /H /I 9{/.notdef}rp /S 172{/.notdef}rp]
QOROMH+OTNEJMScalaSansLF nf
QOROMH+OTNEJMScalaSansLF*1 [7 0 0 -7 0 0 ]msf
317.855 126.615 mo
(H# #'0"'#%1&"*&'"01\(!#\(!"4'&3'!\(\(1&,"&'"0!#%$.)sh
324.855 134.616 mo
(;6=9"\)9:+"CI.";6:-)sh
378.558 134.616 mo
(/;62>5)
[3.85001 3.5 1.75705 3.5 3.5 0 ]xsh
317.855 143.114 mo
(78;6;;?)
[4.41699 4.37503 3.5 1.75705 3.5 3.5 0 ]xsh
QOROMG+OTNEJMScalaSansLF-Bold*1 [7.5 0 0 -7.5 0 0 ]msf
101.627 317.361 mo
(N*>&'!&?"%@)sh
QOROMH+OTNEJMScalaSansLF*1 [7 0 0 -7 0 0 ]msf
101.627 325.861 mo
(7!<@'&A1 B<#@/#D1%1,1@)sh
101.627 333.862 mo
(SB,1%1,1@)sh
187.804 326.33 mo
(>EF)sh
187.804 334.331 mo
(>F9)sh
230.903 326.33 mo
(E:-)sh
230.903 334.331 mo
(E;F)sh
274.002 326.33 mo
(F:?)sh
274.002 334.331 mo
(?9E)sh
317.101 326.33 mo
(?>;)sh
320.594 334.331 mo
(29)
[3.5 0 ]xsh
361.943 326.33 mo
(>F)
[3.5 0 ]xsh
361.943 334.331 mo
(F9)
[3.5 0 ]xsh
406.792 326.33 mo
(E)sh
406.799 334.331 mo
(?)sh
449.891 326.33 mo
(;)sh
449.891 334.331 mo
(;)sh
373.542 201.051 mo
(7!<@'&A1 B<#@/#D1%1,1@)sh
418.09 261.671 mo
(SB,1%1,1@)sh
84.761 417.815 mo
471.886 417.815 li
471.886 407.821 li
84.761 407.821 li
cp
.0370489 .0250858 .0250858 0 cmyk
f
84.761 397.824 mo
471.886 397.824 li
471.886 387.829 li
84.761 387.829 li
cp
f
84.761 437.805 mo
471.886 437.805 li
471.886 427.811 li
84.761 427.811 li
cp
f
84.761 457.796 mo
471.886 457.796 li
471.886 447.801 li
84.761 447.801 li
cp
f
84.761 477.786 mo
471.886 477.786 li
471.886 467.791 li
84.761 467.791 li
cp
f
84.761 497.775 mo
471.886 497.775 li
471.886 487.78 li
84.761 487.78 li
cp
f
84.761 517.766 mo
471.886 517.766 li
471.886 507.771 li
84.761 507.771 li
cp
f
84.761 537.755 mo
471.886 537.755 li
471.886 527.76 li
84.761 527.76 li
cp
f
84.761 557.746 mo
471.886 557.746 li
471.886 547.751 li
84.761 547.751 li
cp
f
84.761 597.725 mo
471.886 597.725 li
471.886 587.731 li
84.761 587.731 li
cp
f
84.761 577.736 mo
471.886 577.736 li
471.886 567.741 li
84.761 567.741 li
cp
f
84.761 617.715 mo
471.886 617.715 li
471.886 607.72 li
84.761 607.72 li
cp
f
84.761 407.82 mo
471.886 407.82 li
471.886 397.824 li
84.761 397.824 li
cp
0 0 0 0 cmyk
f
84.761 427.811 mo
471.886 427.811 li
471.886 417.815 li
84.761 417.815 li
cp
f
84.761 447.8 mo
471.886 447.8 li
471.886 437.805 li
84.761 437.805 li
cp
f
84.761 467.791 mo
471.886 467.791 li
471.886 457.796 li
84.761 457.796 li
cp
f
84.761 487.78 mo
471.886 487.78 li
471.886 477.786 li
84.761 477.786 li
cp
f
471.886 507.77 mo
84.761 507.771 li
84.761 497.775 li
471.886 497.775 li
f
84.761 527.76 mo
471.886 527.76 li
471.886 517.766 li
84.761 517.766 li
cp
f
84.761 547.751 mo
471.886 547.751 li
471.886 537.756 li
84.761 537.756 li
cp
f
471.886 567.74 mo
84.761 567.741 li
84.761 557.746 li
471.886 557.746 li
f
84.761 607.72 mo
471.886 607.72 li
471.886 597.725 li
84.761 597.725 li
cp
f
84.761 627.711 mo
471.886 627.711 li
471.886 617.716 li
84.761 617.716 li
cp
f
84.761 587.731 mo
471.886 587.731 li
471.886 577.736 li
84.761 577.736 li
cp
f
2 lc
405.069 627.741 mo
267.236 627.741 li
.699336 .676143 .639429 .746822 cmyk
@
QOROMH+OTNEJMScalaSansLF*1 [7 0 0 -7 0 0 ]msf
336.974 637.611 mo
(;6:)sh
0 lc
341.352 627.741 mo
341.352 630.991 li
@
QOROMH+OTNEJMScalaSansLF*1 [7 0 0 -7 0 0 ]msf
368.906 637.611 mo
(?6;)sh
373.282 627.741 mo
373.282 630.991 li
@
QOROMH+OTNEJMScalaSansLF*1 [7 0 0 -7 0 0 ]msf
400.665 637.611 mo
(F6;)sh
405.043 627.741 mo
405.043 630.991 li
@
%ADOBeginSubsetFont: AKJBAA+OTNEJMScalaSansLF-Bold AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2021 Adobe System Incorporated. All rights reserved.
systemdict begin
QOROMG+OTNEJMScalaSansLF-Bold dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/z <1C60D8A8C9B76C902ECA5B7B237FDAF5C7A95746E142FCA7FF886FBC3859
A593C68AA6E76A536A5B90EEC915074236> |-
/endash <1C60D8A8C9B7A73DB976CE7C458DFDC2A83A0B63078CA7383BA9> |-
/x <1C60D8A8C9B7734FFF819D81A2875406A3D3D05A550EA6D93804194FB3E4
4ED2DB495425329BD34673351DFC67BA62ABC44F06FA987C6BF325C0900D1F68
501E55> |-
systemdict /gcheck known {setglobal} if end {end} if
end
QOROMG+OTNEJMScalaSansLF-Bold /Encoding get
dup 65 /z put
dup 66 /endash put
dup 67 /x put
pop
%ADOEndSubsetFont
/QOROMG+OTNEJMScalaSansLF-Bold*1 
[32{/.notdef}rp /P /t /i /n /e /s /uni0020 
/a /W /h /o /r /A /l /v 
/d /F /f /m /g /parenleft /percent /parenright 
/B /hyphen /S /u /c /b /p /period 
/R /k /z /endash /x /D 9{/.notdef}rp /N 
177{/.notdef}rp]
QOROMG+OTNEJMScalaSansLF-Bold nf
QOROMG+OTNEJMScalaSansLF-Bold*1 [7.5 0 0 -7.5 0 0 ]msf
377.59 655.668 mo
(9:#"!"#"<&7$!!$+)sh
269.44 655.668 mo
( $2<+*-"A:2'<B,C"!"#"<&7$!!$+)sh
%ADOBeginSubsetFont: ELRBAA+OTNEJMScalaSansLF AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2021 Adobe System Incorporated. All rights reserved.
systemdict begin
QOROMH+OTNEJMScalaSansLF dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/v <1C60D8A8C9B77C89D856A2DEE85DD629654870C89DC5F2F6BA3413F6057B
81B9655569827E2CC1467CD104A85D10CF354F> |-
/A <1C60D8A8C9B7C8C12E1D228C3400B24796B6C3548FADBD33FEF6FF57A689
9422D3ADF2140260B78C322C3C95924D0C1A242DC28EF4522F7354D6> |-
/greaterequal <1C60D8A8C9B795A0CD7C80FC129F7299E96A7B93F3532E69E
722E829033969AC4D0D37F50FFC11E7E79189EE7EA839E1728DF2> |-
/y <1C60D8A8C9B7065314A11BF2E220CF7E872295D8F428A4A390CD2DA5A94B
7E89536F1DE12505B72CB4BF1332C7F8312EDE352BD37076B4DC63F868854D7B
8CEAA3B051FEF2D4669E501172DF9368> |-
/c <1C60D8A8C9B77FE2479226852860E0E00E68C6E73F5CACFA197FD3A52FFC
74B506BBFF1554456B130EDAD7EB8CDD3168C29C9767CF3F6084E35C85EE6A08
A75335AF3ED9EE24DF2B48B94E854FB7665CB13C6ACD114C3D39C3F5BE51B211
BE57> |-
/N <1C60D8A8C9B6EA91B3C151BD5F3AD9C98F18CFD9F05D57A847A2C54DB1B5
E946DBB21E72961B3234849F6DFB3A1A6A3844D483234D89DC13B73FB19225C2
F66D03DB7503410009CAABC97CB16D29DB024752D887728BF539A33E9C95A2FF
8331216866> |-
/O <1C60D8A8C9B6EEDB358A7EA3BD25F3A54ACF3067BF92E47461873902E3ED
0759BCD10CFC3A2E207AE1EE549C92923D0459B1B38CC5ED4BEE2760A0409D74
D5D65449C1470E1F466CE67F7FA507C8F16A4826AA9B074F6DF6170130FEE732
C76AEA0341C5E7921E14> |-
/M <1C60D8A8C9B5907D1B7961FEB560AC1C3620E1230B2AEBFF30CBC1D4253F
216038F89AA455DD65EDE700546C5D88EBD0E4056475BDE2842B7C64489B9173
626E8E9C96685665CEDFACD0D23D2331E3A7C8A73FDA001B21122DB52854D5F2
065CD0A8> |-
/F <1C60D8A8C9B7B14CE594518A7A92FADEC58F3FEAECFF5F833AD299EC084E
66096BFF0BAD3AF0CA1E18E43B027392E45297CC619ECAC5B0> |-
/R <1C60D8A8C9B7F374F526834C11CFE93546A59249948009BE87D7E23182B0
DB708427CF6A6B5231484D2E9D7B27A9123D9B202BD1C4FD4247DF2D337D65DD
993E32DFEA98F80533BD758269BCD68F088BF4A5F8F325169853B15C7D882A52
2ED2710BBCF8770581DE3C8D9D6FDA618C98D362> |-
/W <1C60D8A8C9B6951F7BD4A386C18B7C4B4EED0FCB91CAEADB8F81FFDA3FA9
E5F9113B1361218B8C3669FD03EB6703042916A890D9D03DF35345A77901F0F0
386423AEC6> |-
/E <1C60D8A8C9B780B36587BB66042872FE4A856731DF5D9172CEBFDDCF95E2
0296DB28473B2588208EEAFC8B5D0D1A184B7F9D59360F49F1CC897360> |-
/w <1C60D8A8C9B65130C81CFD6048F0E5D8CB39118FA1F7644FED2114DDABE8
D3EBA47567A73BEE1A6646081C0A47CBB261E34EF2169997982555B3ED1B9E65
9F606CF7102217B369256AFE5BCD82E044C1B1D132BF71D47B6F9A89> |-
/D <1C60D8A8C9B63ABFAD5A31ED14CA1D1CB7DA5927199EA4D5A0F45D8C9AEB
F925887A333712E49E696BAD1D2582C2F3F0AEA4118A17729BAFE7538F1A103E
48B8DDEC8D7B5E3C99E3D8B87887A82ABDD100AD890D84859E3FA85A8A2AF551
4B8227CB76> |-
/k <1C60D8A8C9B775D2C051F616C3D9B00A0C12905743AFB3ECF32D8C47BA8B
CFB25390EA5145FA180931721EB12756590D92B17C2F57B914F903> |-
/K <1C60D8A8C9B7E02AD609739CC58AF872A618D7606BB1FCCA9CBA69DAB703
0940E63EFB814CB5815646EEAEDFA4F200B2BAACEC790679866694E1> |-
/hyphen <1C60D8A8C9B8567783B2E3943FC09E6B31A30C4EAD753240A834DAD
E7CF7> |-
/L <1C60D8A8C9B7AC35550F4742DA45EC97418EF2972460592D89B3CDAC17B9
6C4E880DCDB6DA> |-
systemdict /gcheck known {setglobal} if end {end} if
end
QOROMH+OTNEJMScalaSansLF /Encoding get
dup 71 /v put
dup 74 /A put
dup 75 /greaterequal put
dup 76 /y put
dup 77 /c put
dup 78 /N put
dup 79 /O put
dup 80 /M put
dup 81 /F put
dup 82 /R put
dup 84 /W put
dup 85 /E put
dup 86 /w put
dup 87 /D put
dup 88 /k put
dup 89 /K put
dup 90 /hyphen put
dup 91 /L put
pop
%ADOEndSubsetFont
/QOROMH+OTNEJMScalaSansLF*1 
[32{/.notdef}rp /z /e /space /a /h /t /o 
/r /s /parenleft /f /percent /n /seven /comma 
/endash /d /i /eight /g /p /parenright /period 
/P /less /nine /five /zero /m /six /four 
/one /b /l /u /C /x /three /two 
/v /H /I /A /greaterequal /y /c /N 
/O /M /F /R /S /W /E /w 
/D /k /K /hyphen /L 164{/.notdef}rp]
QOROMH+OTNEJMScalaSansLF nf
QOROMH+OTNEJMScalaSansLF*1 [7 0 0 -7 0 0 ]msf
87.1332 395.049 mo
(OG!'#AA)sh
87.1332 405.052 mo
(J3!)sh
94.1332 415.055 mo
(8=:"L')sh
94.1332 425.058 mo
(K=:"L')sh
87.1332 435.061 mo
(S!D)sh
94.1332 445.064 mo
(P#A!)sh
94.1332 455.067 mo
(Q!<#A!)sh
87.1332 465.07 mo
(R!31&,"&*"!,'&AA<!,%)sh
94.1332 475.073 mo
(N&'%$"J<!'1M#)sh
94.1332 485.076 mo
(T!\(%!',"UB'&4!)sh
94.1332 495.079 mo
(R!\(%"&*"%$!"V&'A0)sh
87.1332 505.082 mo
(IPWC"'1\(X"M#%!3&'L)sh
94.1332 515.085 mo
(Q#G&'#@A!)sh
94.1332 525.088 mo
(I,%!'<!01#%!)sh
94.1332 535.091 mo
(7&&')sh
87.1332 545.094 mo
(Y#',&*\(XL"4!'*&'<#,M!Z\(%#%B\("\(M&'!)sh
94.1332 555.097 mo
(9;"&'"?;;)sh
94.1332 565.1 mo
(-;"&'"2;)sh
87.1332 575.103 mo
(7WZ[?"M&<@1,!0"4&\(1%1G!"\(M&'!)sh
94.1332 585.106 mo
(8?)
[3.85002 0 ]xsh
94.1332 595.109 mo
(K?)
[3.85002 0 ]xsh
87.1332 605.112 mo
(N&6"&*"&'3#,\("V1%$"<!%#\(%#\(!\()sh
94.1332 615.115 mo
(?)sh
94.1332 625.118 mo
(KF)
[3.85002 0 ]xsh
373.282 387.831 mo
373.282 627.74 li
@
%ADOBeginSubsetFont: AKJBAA+OTNEJMScalaSansLF-Bold AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2021 Adobe System Incorporated. All rights reserved.
systemdict begin
QOROMG+OTNEJMScalaSansLF-Bold dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/H <1C60D8A8C9B6F64743DB207F1333A0C0E1284A3F8D0CFDF337665F85D64F
1D5B48F0ED7EEB974D8689C12ADA9F8CB7ABF896C235FEE41C0767CD4650E508
7D70BC8829> |-
/nine <1C60D8A8C9B7A73DCEE46C3C030D7544FBC9484BE61A4A86BCEEEE60D
274CECE0EB703FEEE7421F5C6DB2404C3AAF61CA2794C1AAD5C8C25CE9B995F7
7776083D8FDC3660F1838FF0A4A790C474457D0B8FBC3908BA983B6BAC1319B0
1CC8D40DA211F0C05D0BBE1DECEB18E2AAFEF6B82E51C20C8FAA3269D32CCF9A
2456105B5F401D5593AB58DD39B53F3389AEF90088495C425> |-
/five <1C60D8A8C9B7A73D305BA91626CD33D012ADC2EB1D3413FEBBFF738F6
95733B51B90474E7B4644024E5C99B3D490DDC507D6FDEB171527331BD83DDE0
F2EE077BFEB41309E4FB030CDCA0B640C81EA51E67E523F1DE297B08B73CBFB4
EBB82CC5D0706AB1D71AA8920C0F0> |-
/C <1C60D8A8C9B7DE87586C5D179F718A9528D290C7C23D68E710884B1020AA
F7D2017CFA04D05BCD359BE4C2F4299BD6FEAC5683BD9A5E735A1587DFE7C299
DA5344CF0CBF6E102F2AD30C50FD8D651DC7F898578878C70ED70D3D2966CCB1
98711BF6FF4A661C93ECB4583DC403> |-
/I <1C60D8A8C9B83E2DC55A9902D9F3643013E06FC2A39C0C139924DB557C82
F26E46> |-
/slash <1C60D8A8C9B702295C7E58216DE81271282C0ED38EA451290EF490F5
471161DD1CF7> |-
systemdict /gcheck known {setglobal} if end {end} if
end
QOROMG+OTNEJMScalaSansLF-Bold /Encoding get
dup 69 /H put
dup 70 /nine put
dup 71 /five put
dup 72 /C put
dup 73 /I put
dup 74 /slash put
pop
%ADOEndSubsetFont
/QOROMG+OTNEJMScalaSansLF-Bold*1 
[32{/.notdef}rp /P /t /i /n /e /s /uni0020 
/a /W /h /o /r /A /l /v 
/d /F /f /m /g /parenleft /percent /parenright 
/B /hyphen /S /u /c /b /p /period 
/R /k /z /endash /x /D /H /nine 
/five /C /I /slash 3{/.notdef}rp /N 177{/.notdef}rp]
QOROMG+OTNEJMScalaSansLF-Bold nf
QOROMG+OTNEJMScalaSansLF-Bold*1 [7.5 0 0 -7.5 0 0 ]msf
278.176 382.115 mo
(E'A'+/&?'!"*&1*+&D"%$'%$& +*3+$%%"*#&*+&D$'!\)&4FG5&HI6)sh
187.756 365.112 mo
(N*>&*1&I#%!'#;$%)sh
176.769 373.61 mo
(*1&D"%$'%$& +*3+$%%"*#&)sh
175.014 382.107 mo
(*+&D$'!\)JN*>&*1& '!"$#!%)sh
87.128 382.107 mo
(9:<3+*:=)sh
QOROMH+OTNEJMScalaSansLF*1 [7 0 0 -7 0 0 ]msf
419.814 614.704 mo
(;6:>"\);6EE)sh
448.968 614.704 mo
(/;62-5)
[3.85001 3.5 1.75705 3.5 3.5 0 ]xsh
419.821 624.833 mo
(;6-E"\);6:2)sh
448.975 624.833 mo
(/;69?5)
[3.85001 3.5 1.75705 3.5 3.49295 0 ]xsh
419.821 584.856 mo
(;62-"\);6=F)sh
448.975 584.856 mo
(/?6FE5)
[3.85001 3.49295 1.75705 3.5 3.5 0 ]xsh
419.814 594.719 mo
(;6=F"\);6>-)sh
448.968 594.719 mo
(/;62;5)
[3.85001 3.5 1.75705 3.5 3.5 0 ]xsh
419.821 564.731 mo
(;6=-"\);6>:)sh
448.975 564.731 mo
(/?6;;5)
[3.85001 3.49295 1.75705 3.5 3.5 0 ]xsh
419.814 554.868 mo
(;6=9"\);6:>)sh
448.968 554.868 mo
(/;62-5)
[3.85001 3.5 1.75705 3.5 3.5 0 ]xsh
419.814 534.876 mo
(;6:2"\);6E:)sh
448.968 534.876 mo
(/;69>5)
[3.85001 3.5 1.75705 3.5 3.5 0 ]xsh
419.821 524.88 mo
(;6-;"\);6:>)sh
448.975 524.88 mo
(/;69?5)
[3.85001 3.5 1.75705 3.5 3.49295 0 ]xsh
419.821 494.759 mo
(;6-?"\);6:>)sh
448.968 494.759 mo
(/;69F5)
[3.85001 3.5 1.75705 3.5 3.5 0 ]xsh
419.828 514.751 mo
(;62?"\);6:E)sh
448.975 514.751 mo
(/?6F>5)
[3.85001 3.49295 1.75705 3.5 3.5 0 ]xsh
419.821 484.896 mo
(;6:9"\);6E9)sh
448.975 484.896 mo
(/;6295)
[3.85001 3.5 1.75705 3.5 3.5 0 ]xsh
419.828 454.782 mo
(;6:>"\);6E-)sh
448.982 454.782 mo
(/;62?5)
[3.85001 3.5 1.75705 3.5 3.49295 0 ]xsh
419.828 474.767 mo
(;6-9"\);6:;)sh
448.982 474.767 mo
(/?6F:5)
[3.85001 3.49295 1.75705 3.5 3.5 0 ]xsh
419.828 444.919 mo
(;6--"\);6=?)sh
448.975 444.919 mo
(/;69-5)
[3.85001 3.5 1.75705 3.5 3.5 0 ]xsh
419.821 424.794 mo
(;6=E"\);6>:)sh
448.975 424.794 mo
(/;6225)
[3.85001 3.5 1.75705 3.5 3.5 0 ]xsh
419.821 394.806 mo
(;6=9"\);6:-)sh
448.975 394.806 mo
(/;62>5)
[3.85001 3.5 1.75705 3.5 3.5 0 ]xsh
262.861 637.611 mo
(;6?)sh
267.236 627.741 mo
267.236 630.991 li
@
%ADOBeginSubsetFont: ELRBAA+OTNEJMScalaSansLF AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2021 Adobe System Incorporated. All rights reserved.
systemdict begin
QOROMH+OTNEJMScalaSansLF dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/slash <1C60D8A8C9B702295C7E58216DE812712835C0D8365D9C3E8C56DDDA
228E7C3C> |-
systemdict /gcheck known {setglobal} if end {end} if
end
QOROMH+OTNEJMScalaSansLF /Encoding get
dup 92 /slash put
pop
%ADOEndSubsetFont
/QOROMH+OTNEJMScalaSansLF*1 
[32{/.notdef}rp /z /e /space /a /h /t /o 
/r /s /parenleft /f /percent /n /seven /comma 
/endash /d /i /eight /g /p /parenright /period 
/P /less /nine /five /zero /m /six /four 
/one /b /l /u /C /x /three /two 
/v /H /I /A /greaterequal /y /c /N 
/O /M /F /R /S /W /E /w 
/D /k /K /hyphen /L /slash 163{/.notdef}rp]
QOROMH+OTNEJMScalaSansLF nf
QOROMH+OTNEJMScalaSansLF*1 [7 0 0 -7 0 0 ]msf
419.814 414.805 mo
(;6-;"\);6:>)sh
448.968 414.805 mo
(/;69;5)
[3.85001 3.5 1.75705 3.5 3.5 0 ]xsh
201.365 395.051 mo
(E9:\\2=?)sh
201.358 415.049 mo
(F>2\\:E2)sh
201.365 425.052 mo
(?>-\\EFE)sh
201.358 445.051 mo
(F2-\\=F2)sh
201.365 455.054 mo
(?;2\\FEE)sh
201.358 475.053 mo
(""-:\\F;-)sh
201.365 485.056 mo
(""9-\\F?;)sh
201.358 495.059 mo
(FFE\\>>>)sh
201.358 515.058 mo
(""9;\\F=9)sh
201.358 525.06 mo
(FEF\\>2>)sh
201.365 535.063 mo
(""-E\\?;2)sh
201.358 555.062 mo
(F9F\\=22)sh
201.365 565.065 mo
(?;F\\?-F)sh
201.358 585.064 mo
(?E-\\EF:)sh
201.351 595.066 mo
(F>;\\>9-)sh
201.358 615.065 mo
(""-:\\F?;)sh
201.358 625.068 mo
(E?-\\=>=)sh
377.59 643.233 mo
405.088 643.233 li
@
404.098 644.668 mo
409.518 643.215 li
404.098 641.762 li
f
369.742 643.233 mo
270.45 643.233 li
@
271.441 644.668 mo
266.021 643.215 li
271.441 641.762 li
f
.75 lw
1 ml
368.813 622.712 mo
358.741 622.712 li
@
358.74 622.712 mo
348.147 622.712 li
@
355.615 625.838 mo
361.866 625.838 li
361.866 619.586 li
355.615 619.586 li
cp
.667994 .418982 .0125124 0 cmyk
f
366.729 612.718 mo
322.187 612.718 li
.699336 .676143 .639429 .746822 cmyk
@
341.723 615.843 mo
347.974 615.843 li
347.974 609.592 li
341.723 609.592 li
cp
.667994 .418982 .0125124 0 cmyk
f
382.705 582.734 mo
366.728 582.734 li
.699336 .676143 .639429 .746822 cmyk
@
366.729 582.734 mo
351.187 582.734 li
@
363.604 585.86 mo
369.855 585.86 li
369.855 579.608 li
363.604 579.608 li
cp
.667994 .418982 .0125124 0 cmyk
f
373.155 562.744 mo
354.748 562.744 li
.699336 .676143 .639429 .746822 cmyk
@
354.747 562.744 mo
336.426 562.744 li
@
351.621 565.869 mo
357.872 565.869 li
357.872 559.618 li
351.621 559.618 li
cp
.667994 .418982 .0125124 0 cmyk
f
370.289 532.759 mo
348.147 532.759 li
.699336 .676143 .639429 .746822 cmyk
@
348.148 532.759 mo
324.878 532.759 li
@
345.022 535.884 mo
351.274 535.884 li
351.274 529.632 li
345.022 529.632 li
cp
.667994 .418982 .0125124 0 cmyk
f
368.813 522.763 mo
356.745 522.763 li
.699336 .676143 .639429 .746822 cmyk
@
356.744 522.763 mo
344.848 522.763 li
@
353.618 525.889 mo
359.869 525.889 li
359.869 519.637 li
353.618 519.637 li
cp
.667994 .418982 .0125124 0 cmyk
f
369.334 492.778 mo
357.438 492.778 li
.699336 .676143 .639429 .746822 cmyk
@
357.439 492.778 mo
344.849 492.778 li
@
354.313 495.904 mo
360.565 495.904 li
360.565 489.652 li
354.313 489.652 li
cp
.667994 .418982 .0125124 0 cmyk
f
367.771 482.783 mo
329.914 482.783 li
.699336 .676143 .639429 .746822 cmyk
@
345.804 485.909 mo
352.055 485.909 li
352.055 479.657 li
345.804 479.657 li
cp
.667994 .418982 .0125124 0 cmyk
f
367.25 422.813 mo
336.426 422.813 li
.699336 .676143 .639429 .746822 cmyk
@
348.843 425.939 mo
355.094 425.939 li
355.094 419.687 li
348.843 419.687 li
cp
.667994 .418982 .0125124 0 cmyk
f
368.292 412.818 mo
344.848 412.818 li
.699336 .676143 .639429 .746822 cmyk
@
353.618 415.943 mo
359.869 415.943 li
359.869 409.691 li
353.618 409.691 li
cp
.667994 .418982 .0125124 0 cmyk
f
362.908 592.728 mo
351.186 592.728 li
.699336 .676143 .639429 .746822 cmyk
@
351.187 592.728 mo
338.51 592.728 li
@
348.061 595.854 mo
354.313 595.854 li
354.313 589.602 li
348.061 589.602 li
cp
.667994 .418982 .0125124 0 cmyk
f
366.609 552.749 mo
344.849 552.749 li
.699336 .676143 .639429 .746822 cmyk
@
353.01 555.875 mo
359.262 555.875 li
359.262 549.623 li
353.01 549.623 li
cp
.667994 .418982 .0125124 0 cmyk
f
363.517 452.798 mo
327.483 452.798 li
.699336 .676143 .639429 .746822 cmyk
@
341.723 455.923 mo
347.975 455.923 li
347.975 449.672 li
341.723 449.672 li
cp
.667994 .418982 .0125124 0 cmyk
f
371.765 442.803 mo
350.405 442.803 li
.699336 .676143 .639429 .746822 cmyk
@
358.046 445.928 mo
364.298 445.928 li
364.298 439.677 li
358.046 439.677 li
cp
.667994 .418982 .0125124 0 cmyk
f
383.053 512.768 mo
343.981 512.768 li
.699336 .676143 .639429 .746822 cmyk
@
360.391 515.894 mo
366.642 515.894 li
366.642 509.643 li
360.391 509.643 li
cp
.667994 .418982 .0125124 0 cmyk
f
383.4 472.789 mo
341.288 472.789 li
.699336 .676143 .639429 .746822 cmyk
@
359.175 475.914 mo
365.427 475.914 li
365.427 469.663 li
359.175 469.663 li
cp
.667994 .418982 .0125124 0 cmyk
f
365.166 392.827 mo
347.366 392.827 li
.699336 .676143 .639429 .746822 cmyk
@
353.01 395.953 mo
359.262 395.953 li
359.262 389.702 li
353.01 389.702 li
cp
.667994 .418982 .0125124 0 cmyk
f
.5 lw
2 lc
4 ml
193.055 282.245 mo
193.055 120.65 li
.699336 .676143 .639429 .746822 cmyk
@
451.644 282.245 mo
193.056 282.245 li
@
0 lc
193.055 120.657 mo
189.805 120.657 li
@
QOROMH+OTNEJMScalaSansLF*1 [7 0 0 -7 0 0 ]msf
178.5 122.645 mo
(?;;)sh
193.055 152.974 mo
189.805 152.974 li
@
QOROMH+OTNEJMScalaSansLF*1 [7 0 0 -7 0 0 ]msf
181.993 154.963 mo
(2;)
[3.5 0 ]xsh
193.055 136.816 mo
189.805 136.816 li
@
QOROMH+OTNEJMScalaSansLF*1 [7 0 0 -7 0 0 ]msf
181.993 138.804 mo
(9;)
[3.5 0 ]xsh
193.055 169.133 mo
189.805 169.133 li
@
QOROMH+OTNEJMScalaSansLF*1 [7 0 0 -7 0 0 ]msf
181.993 171.122 mo
(-;)
[3.5 0 ]xsh
193.055 185.292 mo
189.805 185.292 li
@
QOROMH+OTNEJMScalaSansLF*1 [7 0 0 -7 0 0 ]msf
181.993 187.281 mo
(=;)
[3.5 0 ]xsh
193.055 217.609 mo
189.805 217.609 li
@
QOROMH+OTNEJMScalaSansLF*1 [7 0 0 -7 0 0 ]msf
181.993 219.598 mo
(>;)
[3.5 0 ]xsh
193.055 233.769 mo
189.805 233.769 li
@
QOROMH+OTNEJMScalaSansLF*1 [7 0 0 -7 0 0 ]msf
181.993 235.757 mo
(E;)
[3.5 0 ]xsh
193.055 266.086 mo
189.805 266.086 li
@
QOROMH+OTNEJMScalaSansLF*1 [7 0 0 -7 0 0 ]msf
182 268.075 mo
(?;)
[3.49295 0 ]xsh
193.055 201.451 mo
189.805 201.451 li
@
QOROMH+OTNEJMScalaSansLF*1 [7 0 0 -7 0 0 ]msf
181.993 203.439 mo
(:;)
[3.5 0 ]xsh
193.055 249.927 mo
189.805 249.927 li
@
QOROMH+OTNEJMScalaSansLF*1 [7 0 0 -7 0 0 ]msf
181.993 251.916 mo
(F;)
[3.5 0 ]xsh
193.055 282.245 mo
189.805 282.245 li
@
QOROMH+OTNEJMScalaSansLF*1 [7 0 0 -7 0 0 ]msf
185.493 284.234 mo
(;)sh
191.305 292.119 mo
(;)sh
193.055 282.245 mo
193.055 285.495 li
@
QOROMH+OTNEJMScalaSansLF*1 [7 0 0 -7 0 0 ]msf
234.404 292.119 mo
(>)sh
236.154 282.245 mo
236.154 285.495 li
@
QOROMH+OTNEJMScalaSansLF*1 [7 0 0 -7 0 0 ]msf
277.501 292.119 mo
(2)sh
279.252 282.245 mo
279.252 285.495 li
@
QOROMH+OTNEJMScalaSansLF*1 [7 0 0 -7 0 0 ]msf
318.853 292.119 mo
(?F)
[3.49295 0 ]xsh
322.35 282.245 mo
322.35 285.495 li
@
QOROMH+OTNEJMScalaSansLF*1 [7 0 0 -7 0 0 ]msf
361.952 292.119 mo
(?=)
[3.49295 0 ]xsh
365.447 282.245 mo
365.447 285.495 li
@
QOROMH+OTNEJMScalaSansLF*1 [7 0 0 -7 0 0 ]msf
405.046 292.119 mo
(F;)
[3.5 0 ]xsh
408.546 282.245 mo
408.546 285.495 li
@
QOROMH+OTNEJMScalaSansLF*1 [7 0 0 -7 0 0 ]msf
448.144 292.122 mo
(F>)
[3.5 0 ]xsh
451.644 282.245 mo
451.644 285.495 li
@
%ADOBeginSubsetFont: AKJBAA+OTNEJMScalaSansLF-Bold AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2021 Adobe System Incorporated. All rights reserved.
systemdict begin
QOROMG+OTNEJMScalaSansLF-Bold dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/M <1C60D8A8C9B5907D1B7961FEB560AC0054452EF5437B13437C7147B0E265
2E1AE96BC4693A17B3A3209FF57D9806617010EA1E423F918CFEB833F2D8ED49
5B2F83A1456668BC3FCC94D8FD1C04AD8C4DD765482FA5F29B4C5037E86F7389
A0DBADF0EC35F8> |-
systemdict /gcheck known {setglobal} if end {end} if
end
QOROMG+OTNEJMScalaSansLF-Bold /Encoding get
dup 77 /M put
pop
%ADOEndSubsetFont
/QOROMG+OTNEJMScalaSansLF-Bold*1 
[32{/.notdef}rp /P /t /i /n /e /s /uni0020 
/a /W /h /o /r /A /l /v 
/d /F /f /m /g /parenleft /percent /parenright 
/B /hyphen /S /u /c /b /p /period 
/R /k /z /endash /x /D /H /nine 
/five /C /I /slash 2{/.notdef}rp /M /N 177{/.notdef}rp]
QOROMG+OTNEJMScalaSansLF-Bold nf
QOROMG+OTNEJMScalaSansLF-Bold*1 [7.5 0 0 -7.5 0 0 ]msf
310.2 304.577 mo
(M*#!\)%)sh
.75 lw
1 ml
193.507 116.326 mo
193.507 120.659 li
.159335 .799222 .840513 .0436408 cmyk
@
193.507 116.326 mo
193.507 120.659 li
@
193.507 116.326 mo
193.507 120.659 li
@
193.507 116.326 mo
193.507 120.659 li
@
193.507 116.326 mo
193.507 120.659 li
@
193.507 116.326 mo
193.507 120.659 li
@
193.507 116.326 mo
193.507 120.659 li
@
193.507 116.326 mo
193.507 120.659 li
@
193.507 116.326 mo
193.507 120.659 li
@
193.507 116.326 mo
193.507 120.659 li
@
193.507 116.326 mo
193.507 120.659 li
@
193.507 116.326 mo
193.507 120.659 li
@
193.507 116.326 mo
193.507 120.659 li
@
193.507 116.326 mo
193.507 120.659 li
@
193.507 116.326 mo
193.507 120.659 li
@
203.412 118.673 mo
203.412 123.006 li
@
204.101 119.485 mo
204.101 123.818 li
@
205.824 120.297 mo
205.824 124.63 li
@
208.321 121.471 mo
208.321 125.804 li
@
208.666 121.832 mo
208.666 126.165 li
@
218.226 127.79 mo
218.226 132.123 li
@
221.758 132.935 mo
221.758 137.268 li
@
222.102 132.935 mo
222.102 137.268 li
@
222.102 132.935 mo
222.102 137.268 li
@
222.447 134.56 mo
222.447 138.893 li
@
223.911 145.754 mo
223.911 150.087 li
@
224.256 146.115 mo
224.256 150.448 li
@
225.289 149.365 mo
225.289 153.698 li
@
228.476 151.802 mo
228.476 156.135 li
@
237.003 155.052 mo
237.003 159.385 li
@
237.348 155.052 mo
237.348 159.385 li
@
238.037 156.316 mo
238.037 160.649 li
@
238.726 160.83 mo
238.726 165.163 li
@
240.534 162.093 mo
240.534 166.426 li
@
251.818 164.531 mo
251.818 168.864 li
@
252.162 164.531 mo
252.162 168.864 li
@
252.507 164.983 mo
252.507 169.316 li
@
252.507 165.343 mo
252.507 169.676 li
@
252.937 165.343 mo
252.937 169.676 li
@
252.937 168.322 mo
252.937 172.655 li
@
253.282 168.322 mo
253.282 172.655 li
@
253.627 169.225 mo
253.627 173.558 li
@
253.971 170.489 mo
253.971 174.822 li
@
255.694 171.301 mo
255.694 175.634 li
@
258.536 171.301 mo
258.536 175.634 li
@
265.599 173.107 mo
265.599 177.44 li
@
266.03 173.468 mo
266.03 177.801 li
@
266.718 173.919 mo
266.718 178.252 li
@
267.063 173.919 mo
267.063 178.252 li
@
267.408 174.371 mo
267.408 178.704 li
@
267.752 174.822 mo
267.752 179.155 li
@
267.752 175.273 mo
267.752 179.606 li
@
268.097 175.273 mo
268.097 179.606 li
@
269.561 177.621 mo
269.561 181.954 li
@
269.561 178.162 mo
269.561 182.495 li
@
269.905 178.162 mo
269.905 182.495 li
@
270.25 178.614 mo
270.25 182.947 li
@
270.25 179.065 mo
270.25 183.398 li
@
272.317 179.606 mo
272.317 183.939 li
@
275.159 180.6 mo
275.159 184.933 li
@
277.313 180.6 mo
277.313 184.933 li
@
278.691 180.6 mo
278.691 184.933 li
@
281.189 182.044 mo
281.189 186.377 li
@
281.533 182.585 mo
281.533 186.919 li
@
282.222 183.669 mo
282.222 188.002 li
@
282.653 184.12 mo
282.653 188.453 li
@
282.997 184.662 mo
282.997 188.995 li
@
283.342 185.745 mo
283.342 190.078 li
@
283.687 186.829 mo
283.687 191.162 li
@
284.72 187.37 mo
284.72 191.703 li
@
292.558 190.169 mo
292.558 194.502 li
@
294.625 190.169 mo
294.625 194.502 li
@
295.314 191.342 mo
295.314 195.675 li
@
296.089 191.884 mo
296.089 196.217 li
@
296.779 191.884 mo
296.779 196.217 li
@
297.467 191.884 mo
297.467 196.217 li
@
297.812 193.599 mo
297.812 197.932 li
@
298.157 193.599 mo
298.157 197.932 li
@
298.846 193.599 mo
298.846 197.932 li
@
299.62 193.599 mo
299.62 197.932 li
@
300.655 194.321 mo
300.655 198.654 li
@
310.215 196.307 mo
310.215 200.64 li
@
310.56 196.307 mo
310.56 200.64 li
@
311.248 196.307 mo
311.248 200.64 li
@
311.938 196.307 mo
311.938 200.64 li
@
312.368 197.029 mo
312.368 201.362 li
@
312.713 198.474 mo
312.713 202.807 li
@
313.057 199.196 mo
313.057 203.529 li
@
313.746 200.008 mo
313.746 204.341 li
@
314.436 200.008 mo
314.436 204.341 li
@
314.78 200.821 mo
314.78 205.154 li
@
316.933 202.446 mo
316.933 206.779 li
@
325.374 204.161 mo
325.374 208.494 li
@
326.15 204.161 mo
326.15 208.494 li
@
326.493 204.161 mo
326.493 208.494 li
@
327.183 205.064 mo
327.183 209.397 li
@
327.528 205.967 mo
327.528 210.3 li
@
327.871 209.668 mo
327.871 214.001 li
@
328.216 209.668 mo
328.216 214.001 li
@
328.561 209.668 mo
328.561 214.001 li
@
329.336 209.668 mo
329.336 214.001 li
@
330.025 211.744 mo
330.025 216.077 li
@
331.747 212.737 mo
331.747 217.07 li
@
338.121 212.737 mo
338.121 217.07 li
@
341.997 212.737 mo
341.997 217.07 li
@
354.744 212.737 mo
354.744 217.07 li
@
355.089 212.737 mo
355.089 217.07 li
@
355.52 212.737 mo
355.52 217.07 li
@
356.209 212.737 mo
356.209 217.07 li
@
356.554 212.737 mo
356.554 217.07 li
@
356.898 214.001 mo
356.898 218.334 li
@
356.898 215.265 mo
356.898 219.598 li
@
357.242 215.265 mo
357.242 219.598 li
@
357.587 215.265 mo
357.587 219.598 li
@
358.277 218.695 mo
358.277 223.028 li
@
358.707 218.695 mo
358.707 223.028 li
@
359.74 218.695 mo
359.74 223.028 li
@
369.99 218.695 mo
369.99 223.028 li
@
383.082 218.695 mo
383.082 223.028 li
@
383.771 218.695 mo
383.771 223.028 li
@
384.46 218.695 mo
384.46 223.028 li
@
385.58 218.695 mo
385.58 223.028 li
@
385.924 221.674 mo
385.924 226.007 li
@
386.269 224.834 mo
386.269 229.167 li
@
386.613 224.834 mo
386.613 229.167 li
@
386.958 224.834 mo
386.958 229.167 li
@
386.958 236.66 mo
386.958 240.993 li
@
415.64 257.333 mo
415.64 261.666 li
@
193.162 120.658 mo
197.038 120.658 li
197.038 121.109 li
199.105 121.109 li
199.105 121.47 li
200.569 121.47 li
200.569 121.831 li
201.947 121.831 li
201.947 122.283 li
202.292 122.283 li
202.292 122.644 li
202.981 122.644 li
202.981 123.005 li
203.756 123.005 li
203.756 123.818 li
204.1 123.818 li
204.1 124.179 li
204.445 124.63 li
206.599 124.63 li
206.599 124.991 li
207.976 124.991 li
207.976 125.804 li
208.321 125.804 li
208.321 126.165 li
209.355 126.165 li
209.355 126.616 li
209.785 126.616 li
209.785 127.338 li
210.474 127.338 li
210.474 127.789 li
210.819 127.789 li
210.819 128.512 li
211.163 128.963 li
211.852 128.963 li
211.852 129.324 li
212.541 129.324 li
212.541 129.776 li
213.661 129.776 li
213.661 130.137 li
214.35 130.137 li
214.35 130.498 li
215.039 130.498 li
215.039 130.949 li
216.073 130.949 li
216.073 131.31 li
216.503 131.31 li
216.503 131.671 li
217.193 131.671 li
217.193 132.123 li
218.571 132.123 li
218.571 132.484 li
218.915 132.484 li
218.915 132.935 li
220.035 132.935 li
220.035 133.296 li
220.379 133.296 li
220.379 133.658 li
220.724 133.658 li
220.724 134.109 li
221.069 134.109 li
221.069 135.643 li
221.413 135.643 li
221.413 136.095 li
221.758 136.095 li
221.758 137.268 li
222.102 137.268 li
222.102 138.893 li
222.447 138.893 li
222.447 140.428 li
222.791 140.428 li
222.791 143.678 li
223.222 143.678 li
223.222 146.837 li
223.566 146.837 li
223.566 150.087 li
223.911 150.087 li
223.911 150.449 li
224.255 150.449 li
224.255 152.074 li
224.6 152.074 li
224.6 153.337 li
224.944 153.337 li
224.944 153.698 li
225.289 153.698 li
225.289 154.15 li
225.634 154.15 li
225.634 154.962 li
225.978 154.962 li
225.978 155.323 li
226.753 155.323 li
226.753 155.775 li
227.442 155.775 li
227.442 156.136 li
231.318 156.136 li
231.318 156.587 li
232.352 156.587 li
232.352 156.948 li
233.127 156.948 li
233.127 157.4 li
234.505 157.4 li
234.505 157.761 li
235.194 157.761 li
235.194 158.212 li
235.538 158.212 li
235.538 159.024 li
235.883 159.024 li
235.883 159.386 li
237.692 159.386 li
237.692 160.649 li
238.037 160.649 li
238.037 163.538 li
238.381 163.538 li
238.381 165.163 li
238.725 165.163 li
238.725 165.524 li
239.07 165.524 li
239.07 165.975 li
240.19 165.975 li
240.19 166.427 li
241.223 166.427 li
241.223 166.788 li
246.563 166.788 li
246.563 167.24 li
247.252 167.24 li
247.252 167.6 li
251.128 167.6 li
251.128 168.503 li
251.473 168.503 li
251.473 168.864 li
252.162 168.864 li
252.162 169.316 li
252.506 169.316 li
252.506 169.677 li
252.937 169.677 li
252.937 172.656 li
253.282 172.656 li
253.282 173.558 li
253.626 173.558 li
253.626 174.823 li
254.315 174.823 li
254.315 175.274 li
255.349 175.274 li
255.349 175.635 li
259.655 175.635 li
259.655 176.086 li
260 176.086 li
260 176.537 li
261.723 176.537 li
261.723 176.989 li
263.876 176.989 li
263.876 177.44 li
265.599 177.44 li
265.599 177.802 li
266.373 177.802 li
266.373 178.253 li
267.063 178.253 li
267.063 178.704 li
267.407 178.704 li
267.407 179.156 li
267.752 179.156 li
267.752 179.607 li
268.097 179.607 li
268.097 181.051 li
269.13 181.051 li
269.13 181.954 li
269.56 181.954 li
269.56 182.495 li
269.905 182.495 li
269.905 182.947 li
270.25 182.947 li
270.25 183.398 li
270.594 183.398 li
270.594 183.94 li
275.159 183.94 li
275.159 184.933 li
278.69 184.933 li
278.69 185.385 li
280.154 185.385 li
280.154 185.926 li
280.499 186.377 li
281.533 186.377 li
281.533 186.919 li
281.877 186.919 li
281.877 188.002 li
282.222 188.002 li
282.222 188.454 li
282.652 188.454 li
282.652 188.995 li
282.997 188.995 li
282.997 190.078 li
283.342 190.078 li
283.342 191.162 li
284.03 191.162 li
284.03 191.703 li
285.064 191.703 li
285.064 192.336 li
286.528 192.336 li
286.528 192.877 li
287.218 192.877 li
287.218 193.419 li
288.94 193.419 li
288.94 193.96 li
291.094 193.96 li
291.094 194.502 li
294.97 194.502 li
294.97 195.676 li
295.313 195.676 li
295.313 196.217 li
297.467 196.217 li
297.467 197.932 li
300.309 197.932 li
300.309 198.655 li
301.687 198.655 li
301.687 199.286 li
302.808 199.286 li
302.808 199.919 li
303.841 199.919 li
303.841 200.641 li
311.937 200.641 li
311.937 201.363 li
312.368 201.363 li
312.368 202.807 li
312.713 202.807 li
312.713 203.53 li
313.401 203.53 li
313.401 204.342 li
314.435 204.342 li
314.435 205.155 li
314.779 205.155 li
314.779 206.78 li
317.277 206.78 li
317.277 207.682 li
323.996 207.682 li
323.996 208.494 li
326.838 208.494 li
326.838 209.397 li
327.183 209.397 li
327.183 210.3 li
327.527 210.3 li
327.527 214.001 li
329.681 214.001 li
329.681 216.077 li
330.369 216.077 li
330.369 217.071 li
356.554 217.071 li
356.554 218.334 li
356.897 218.334 li
356.897 219.598 li
357.587 219.598 li
357.587 221.313 li
358.276 221.313 li
358.276 223.029 li
385.924 223.029 li
385.924 226.008 li
386.268 226.008 li
386.268 229.167 li
386.958 229.167 li
386.958 240.993 li
387.991 240.993 li
387.991 261.666 li
415.64 261.666 li
@
193.507 116.326 mo
193.507 120.659 li
.667994 .418982 .0125124 0 cmyk
@
193.507 116.326 mo
193.507 120.659 li
@
193.507 116.326 mo
193.507 120.659 li
@
193.507 116.326 mo
193.507 120.659 li
@
193.507 116.326 mo
193.507 120.659 li
@
193.507 116.326 mo
193.507 120.659 li
@
193.507 116.326 mo
193.507 120.659 li
@
193.507 116.326 mo
193.507 120.659 li
@
206.168 118.312 mo
206.168 122.645 li
@
210.13 119.034 mo
210.13 123.367 li
@
215.04 120.569 mo
215.04 124.902 li
@
220.724 124 mo
220.724 128.333 li
@
221.758 126.708 mo
221.758 131.041 li
@
223.567 134.471 mo
223.567 138.804 li
@
223.567 134.471 mo
223.567 138.804 li
@
229.596 138.263 mo
229.596 142.596 li
@
237.692 141.061 mo
237.692 145.394 li
@
238.726 144.491 mo
238.726 148.824 li
@
239.07 144.491 mo
239.07 148.824 li
@
239.07 144.491 mo
239.07 148.824 li
@
241.223 147.29 mo
241.223 151.623 li
@
252.507 150.449 mo
252.507 154.782 li
@
252.507 150.449 mo
252.507 154.782 li
@
252.937 153.248 mo
252.937 157.581 li
@
253.971 156.046 mo
253.971 160.379 li
@
255.349 157.22 mo
255.349 161.553 li
@
256.124 157.581 mo
256.124 161.914 li
@
262.843 159.657 mo
262.843 163.99 li
@
265.599 159.657 mo
265.599 163.99 li
@
266.03 159.657 mo
266.03 163.99 li
@
267.063 160.018 mo
267.063 164.351 li
@
267.063 160.018 mo
267.063 164.351 li
@
267.063 160.018 mo
267.063 164.351 li
@
267.063 160.018 mo
267.063 164.351 li
@
267.408 160.018 mo
267.408 164.351 li
@
267.752 161.282 mo
267.752 165.615 li
@
267.752 161.282 mo
267.752 165.615 li
@
267.752 161.282 mo
267.752 165.615 li
@
268.097 161.643 mo
268.097 165.976 li
@
268.097 161.643 mo
268.097 165.976 li
@
268.097 161.643 mo
268.097 165.976 li
@
268.097 161.643 mo
268.097 165.976 li
@
268.097 161.643 mo
268.097 165.976 li
@
268.097 161.643 mo
268.097 165.976 li
@
269.13 163.81 mo
269.13 168.143 li
@
269.561 163.81 mo
269.561 168.143 li
@
269.561 163.81 mo
269.561 168.143 li
@
269.905 165.525 mo
269.905 169.858 li
@
270.25 165.525 mo
270.25 169.858 li
@
270.25 165.976 mo
270.25 170.309 li
@
271.628 165.976 mo
271.628 170.309 li
@
273.782 165.976 mo
273.782 170.309 li
@
276.28 165.976 mo
276.28 170.309 li
@
280.155 165.976 mo
280.155 170.309 li
@
280.499 166.428 mo
280.499 170.761 li
@
281.189 166.428 mo
281.189 170.761 li
@
281.533 166.879 mo
281.533 171.212 li
@
282.222 168.323 mo
282.222 172.656 li
@
282.653 168.323 mo
282.653 172.656 li
@
282.653 168.775 mo
282.653 173.108 li
@
282.997 169.226 mo
282.997 173.559 li
@
283.342 169.226 mo
283.342 173.559 li
@
283.342 169.677 mo
283.342 174.01 li
@
283.687 169.677 mo
283.687 174.01 li
@
284.72 169.677 mo
284.72 174.01 li
@
285.065 170.219 mo
285.065 174.552 li
@
285.409 170.219 mo
285.409 174.552 li
@
288.941 170.67 mo
288.941 175.003 li
@
290.405 170.67 mo
290.405 175.003 li
@
294.97 170.67 mo
294.97 175.003 li
@
294.97 171.212 mo
294.97 175.545 li
@
295.658 171.212 mo
295.658 175.545 li
@
295.658 171.754 mo
295.658 176.087 li
@
296.089 171.754 mo
296.089 176.087 li
@
296.434 172.295 mo
296.434 176.628 li
@
296.779 172.295 mo
296.779 176.628 li
@
297.123 172.295 mo
297.123 176.628 li
@
297.467 174.372 mo
297.467 178.705 li
@
297.812 174.372 mo
297.812 178.705 li
@
299.62 176.087 mo
299.62 180.42 li
@
300.655 176.087 mo
300.655 180.42 li
@
301.343 176.087 mo
301.343 180.42 li
@
309.87 177.26 mo
309.87 181.593 li
@
310.215 177.26 mo
310.215 181.593 li
@
310.904 177.26 mo
310.904 181.593 li
@
311.593 177.26 mo
311.593 181.593 li
@
312.368 179.066 mo
312.368 183.399 li
@
312.713 179.066 mo
312.713 183.399 li
@
313.057 179.698 mo
313.057 184.031 li
@
313.746 180.962 mo
313.746 185.295 li
@
314.78 180.962 mo
314.78 185.295 li
@
314.78 181.594 mo
314.78 185.927 li
@
315.124 181.594 mo
315.124 185.927 li
@
315.9 181.594 mo
315.9 185.927 li
@
316.933 181.594 mo
316.933 185.927 li
@
319.431 181.594 mo
319.431 185.927 li
@
323.307 181.594 mo
323.307 185.927 li
@
324.685 181.594 mo
324.685 185.927 li
@
325.03 182.316 mo
325.03 186.649 li
@
326.15 183.038 mo
326.15 187.371 li
@
326.493 184.482 mo
326.493 188.815 li
@
326.838 186.017 mo
326.838 190.35 li
@
327.183 186.017 mo
327.183 190.35 li
@
327.528 187.552 mo
327.528 191.885 li
@
328.216 188.455 mo
328.216 192.788 li
@
329.336 189.357 mo
329.336 193.69 li
@
329.681 191.072 mo
329.681 195.405 li
@
330.369 191.072 mo
330.369 195.405 li
@
330.714 191.072 mo
330.714 195.405 li
@
331.404 191.072 mo
331.404 195.405 li
@
332.178 191.072 mo
332.178 195.405 li
@
340.964 192.065 mo
340.964 196.399 li
@
346.649 192.065 mo
346.649 196.399 li
@
348.027 192.065 mo
348.027 196.399 li
@
354.056 193.149 mo
354.056 197.482 li
@
354.401 193.149 mo
354.401 197.482 li
@
356.554 197.392 mo
356.554 201.725 li
@
356.898 199.558 mo
356.898 203.891 li
@
357.242 199.558 mo
357.242 203.891 li
@
357.587 199.558 mo
357.587 203.891 li
@
359.396 201.274 mo
359.396 205.607 li
@
360.085 201.274 mo
360.085 205.607 li
@
370.334 203.079 mo
370.334 207.412 li
@
372.488 203.079 mo
372.488 207.412 li
@
376.363 203.079 mo
376.363 207.412 li
@
382.048 205.065 mo
382.048 209.398 li
@
384.115 209.127 mo
384.115 213.46 li
@
384.805 209.127 mo
384.805 213.46 li
@
385.236 209.127 mo
385.236 213.46 li
@
386.269 209.127 mo
386.269 213.46 li
@
386.613 209.127 mo
386.613 213.46 li
@
386.613 211.565 mo
386.613 215.898 li
@
386.958 211.565 mo
386.958 215.898 li
@
387.302 214.905 mo
387.302 219.238 li
@
387.647 214.905 mo
387.647 219.238 li
@
387.991 214.905 mo
387.991 219.238 li
@
388.767 214.905 mo
388.767 219.238 li
@
389.112 214.905 mo
389.112 219.238 li
@
390.489 214.905 mo
390.489 219.238 li
@
391.178 214.905 mo
391.178 219.238 li
@
407.457 227.453 mo
407.457 231.786 li
@
414.175 227.453 mo
414.175 231.786 li
@
414.95 227.453 mo
414.95 231.786 li
@
416.673 227.453 mo
416.673 231.786 li
@
193.162 120.659 mo
194.196 120.659 li
194.196 121.11 li
194.885 121.11 li
194.885 121.471 li
196.693 121.471 li
196.693 121.832 li
198.761 121.832 li
198.761 122.194 li
200.224 122.194 li
200.224 122.645 li
208.665 122.645 li
208.665 123.006 li
209.785 123.006 li
209.785 123.367 li
210.13 123.367 li
210.13 123.728 li
212.541 123.728 li
212.541 124.089 li
212.886 124.089 li
212.886 124.541 li
214.695 124.541 li
214.695 124.902 li
215.384 124.902 li
215.384 125.263 li
216.503 125.263 li
216.503 126.076 li
217.537 126.076 li
217.537 126.436 li
218.226 126.436 li
218.226 127.159 li
219.69 127.159 li
219.69 127.61 li
220.035 127.61 li
220.035 128.332 li
220.724 128.332 li
220.724 128.784 li
221.069 128.784 li
221.069 130.318 li
221.413 130.318 li
221.413 130.68 li
221.758 130.68 li
221.758 131.04 li
222.102 131.04 li
222.102 131.402 li
222.447 131.402 li
222.447 132.575 li
222.791 132.575 li
222.791 134.561 li
223.222 134.561 li
223.222 138.804 li
223.566 138.804 li
223.566 140.7 li
223.911 140.7 li
223.911 141.873 li
224.255 141.873 li
224.255 142.234 li
224.944 142.234 li
224.944 142.596 li
230.974 142.596 li
230.974 143.047 li
232.007 143.047 li
232.007 143.408 li
236.658 143.408 li
236.658 143.769 li
237.003 143.769 li
237.003 144.943 li
237.348 144.943 li
237.348 145.394 li
237.692 145.394 li
237.692 145.755 li
238.037 145.755 li
238.037 147.741 li
238.381 147.741 li
238.381 148.463 li
238.725 148.463 li
238.725 148.825 li
239.07 148.825 li
239.07 149.998 li
239.5 149.998 li
239.5 150.45 li
240.19 150.45 li
240.19 150.81 li
240.534 150.81 li
240.534 151.623 li
241.912 151.623 li
241.912 151.984 li
244.41 151.984 li
244.41 152.797 li
245.099 152.797 li
245.099 153.158 li
245.444 153.158 li
245.444 153.97 li
247.941 153.97 li
247.941 154.421 li
248.631 154.421 li
248.631 154.783 li
252.506 154.783 li
252.506 155.143 li
252.937 155.143 li
252.937 157.581 li
253.282 157.581 li
253.282 158.755 li
253.626 158.755 li
253.626 159.567 li
253.971 159.567 li
253.971 160.38 li
254.66 160.38 li
254.66 160.741 li
255.004 160.741 li
255.004 161.102 li
255.349 161.102 li
255.349 161.553 li
255.693 161.914 li
256.469 161.914 li
256.469 162.366 li
256.813 162.366 li
256.813 162.727 li
259.225 162.727 li
259.225 163.178 li
259.655 163.178 li
259.655 163.539 li
260.689 163.539 li
260.689 163.991 li
266.373 163.991 li
266.373 164.351 li
267.407 164.351 li
267.407 164.803 li
267.752 164.803 li
267.752 165.616 li
268.097 165.616 li
268.097 165.976 li
268.44 165.976 li
268.44 166.879 li
268.785 166.879 li
268.785 167.692 li
269.13 167.692 li
269.13 168.143 li
269.56 168.143 li
269.56 169.046 li
269.905 169.046 li
269.905 169.858 li
270.25 169.858 li
270.25 170.31 li
280.154 170.31 li
280.154 170.761 li
281.188 170.761 li
281.188 171.212 li
282.222 171.212 li
282.222 172.657 li
282.652 172.657 li
282.652 173.108 li
282.997 173.108 li
282.997 173.559 li
283.342 173.559 li
283.342 174.011 li
285.064 174.011 li
285.064 174.553 li
285.409 174.553 li
285.409 175.004 li
294.97 175.004 li
294.97 175.546 li
295.658 175.546 li
295.658 176.087 li
296.433 176.087 li
296.433 176.629 li
297.123 176.629 li
297.123 177.622 li
297.467 177.622 li
297.467 178.705 li
298.156 178.705 li
298.156 179.879 li
298.501 179.879 li
298.501 180.42 li
308.061 180.42 li
308.061 180.962 li
308.75 180.962 li
308.75 181.594 li
311.937 181.594 li
311.937 182.136 li
312.368 182.136 li
312.368 183.399 li
312.713 183.399 li
312.713 184.031 li
313.401 184.031 li
313.401 185.295 li
314.779 185.295 li
314.779 185.927 li
325.029 185.927 li
325.029 186.649 li
325.805 186.649 li
325.805 187.371 li
326.149 187.371 li
326.149 188.816 li
326.838 188.816 li
326.838 190.35 li
327.183 190.35 li
327.183 191.885 li
328.216 191.885 li
328.216 192.788 li
328.56 192.788 li
328.56 193.691 li
329.336 193.691 li
329.336 195.406 li
339.93 195.406 li
339.93 196.399 li
349.49 196.399 li
349.49 197.482 li
354.744 197.482 li
354.744 200.642 li
355.864 200.642 li
355.864 201.725 li
356.897 201.725 li
356.897 203.891 li
358.276 203.891 li
358.276 205.607 li
368.611 205.607 li
368.611 207.412 li
377.397 207.412 li
377.397 209.398 li
384.115 209.398 li
384.115 213.461 li
386.613 213.461 li
386.613 215.898 li
386.958 215.898 li
386.958 219.238 li
391.522 219.238 li
391.522 231.786 li
416.673 231.786 li
@
4 ml
76.385 665.651 mo
480.636 665.651 li
480.636 100.555 li
76.385 100.555 li
cp
.613886 .51693 .497383 .20087 cmyk
@
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: AXNBAA+TimesNewRomanPSMT-Identity-H Initial
Adobe_CoolType_Utility begin ct_MakeOCF begin ct_saveCIDInit
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2021 Adobe System Incorporated. All rights reserved.
%%DocumentNeededResources: ProcSet (CIDInit)
%%IncludeResource: ProcSet (CIDInit)
%%BeginResource: CIDFont (AXNBAA+TimesNewRomanPSMT)
%%Title: (AXNBAA+TimesNewRomanPSMT Adobe Identity 0)
%%Version: 0
/CIDInit /ProcSet findresource begin
14 dict begin
/CIDFontName /AXNBAA+TimesNewRomanPSMT def
/CIDFontType 0 def
/CIDSystemInfo 3 dict dup begin
/Registry (Adobe) def
/Ordering (Identity) def
/Supplement 0 def
end def
/FontBBox {-568 -307 2046 1040} def
/FontInfo 4 dict dup begin
/FSType 8 def
end def
/CIDMapOffset 57 def
/FDBytes 1 def
/GDBytes 1 def
/CIDCount 4685 def
/CDevProc {pop pop pop pop pop 0 -1000 7 index 2 div 880} def
/FDArray 1 array
dup 0
%ADOBeginFontDict
4 dict dup begin
/FontType 1 def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
%ADOBeginPrivateDict
/Private 7 dict dup begin
/BlueValues [0 0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/SubrMapOffset 0 def
/SDBytes 1 def
/SubrCount 5 def
end def
%ADOEndPrivateDict
end put
%ADOEndFontDict
def
/GlyphDirectory 47 dict def
ct_GlyphDirProcs begin
GlyphDirectory
+
0 <001C60D8A8C9B6FF86FBD66B095379F45880CA28D0F0C4629F99B72EFEDBB
222483BD74F8B> |
55 <001C60D8A8C9B7D8BE514ED6977CE9F9E5860FEBB6D8EBF5879FDED6C1E4
8F6AFEEE7B65DB6C9D492058CAA103CB13A7A80B0015E85F272BB9775991CD97
556EC3CFB46A4E1606F006216EABEB711074247C72C159202F32CC7F5F403FAE
58110685510DDB32C57700D5067C975D7063A496FE85C1E5> |
75 <001C60D8A8C9B7A73DB904DA2C7A38531EB5E07DB80E9375E00037710435
E027FD1F7B471BB2C47AEA703B8CB5C9C005CAA0B77F572194961F7C30413194
A0134D3FF9BA81F629AD195D96BD3C1285904670FEB33C334E260F33EE9AB1A2
D9C0C66E38CE4D3CA583879DAF16CE988CC2A14E39FED6599F4B0F3F8F061B58
5E2410824AE8C179E66BD3AD9F6E34CD8CBF79298E3E4553D0E9DCA292805DED
8E36C58209B17E38B2DFAFEB881CA5FB9EC7A76A0CF0C4BFE83CE749EBD15B15
E97FBEA4E90F2186A54E69C28F4083AB76DBE019E4C57B27760FED872C448379
6F735A795EACD82F245D81FB43B5> |
72 <001C60D8A8C9B77FE2C19119FE019B929F076F8319E8913467AECA41BE2B
EAD3EC175346E3F888D3AD76D215AD69034A954DFD661ECBEA3B145468480B6A
15F5C865D2083DC0B04744AA76DE4CC9E0C9DBDCC2C59DAA00F28A6A47092C7F
FA0397DC47C5CBBA69AD805D3DD20D56411E92B0DE9E3F19C2FDEE1FA5013189
84A59E1CFFFD06EA629758085868D3F5F7204292> |
3 <001C60D8A8C9B8707C25> |
49 <001C60D8A8C9B6079FEBDAFCF29D322161AC3F52EDD22433113CAA67ECAF
0B056592AA81FE2842CB172B65A1B8C599C7080F0FEEDF52AD2A1E3DD4CF5B5A
3ABC5E3E3936B6025ECB4BBB9A6B9E506B790F934302A34C91233D5C7DD4480C
8E57FB7AE58D5F049C8795FEC67FB4BCA555E2CC51B9B80AEAE5214780F4B92D
63E63AE746DB94B9539BA648935E38> |
90 <001C60D8A8C9B6079F04262E67C9FB6DFF2B2A2909EEE6C74AA460646E64
18023C6B7542892CB61B617E90DA8C58C94D261B2066526778FA77F05506A363
FE5266E7C038D05568B67F867A9FF97988CC575C0A7C1F4DE18568CA203BA523
917E8148BF72D6E4FEA4245E4F8E144E9C4F6DDF7EC6DAC323FEA1568E1A6C8D
8526507DC2E91B066C274F65DD58F049FFA3E606BF021DDA3B6174F51DB721A6
C7E1197FF1898AE92ADB1C1DD84FD7DEC1> |
40 <001C60D8A8C9B7D8BE19945133FE501067A24BBF08B984801DD42E090C7B
FCA94BE6C4AA953A8A674F2ED3DEE261A8700CA873A3A1D3699D8129F8FA28DE
52C44FD8214EA37190B26E64C97677BF6E1856F59EF49286A31D4133D861C74C
DB92794376B13E311920B8F547FC8F105147550894C833300FA326DF7877402F
2A3FD3184C9B8E130B79DB62E2735C65FD4E7A86140D8A7D764E8F05488CC194
9558757A62743714E5384E2EF166B32CB849712A9C93B7CF04FCFE8063494A21
5FA79B98816AEC20BC3F> |
81 <001C60D8A8C9B7A73DB913C38909CDA29FD53BC2807766C389AFB9ED86F7
BC81642DEC755C464ECEF36210D9B2C516FEA8C1248DF87B00C42E8B7B13BCCD
9D4DADECDD469C646397E88CF560CD28B02CAE7D1B9203699A1DE9CF796CD494
DF60582CAFD70B7F17C1569B79CFC1B11937F06CBBF98FB3F8ABA83215B28002
6130687B8B88299FC622B1B9C743E6B4E2D3E657B3D5566E1938323637D7929F
2E277006B7F4C91822AAA6911E494E2AD0998CB1FC1434E1920012738BB988F6
A0027198438FE663C2EACF82CEB86F7C727594> |
74 <001C60D8A8C9B7A73DAC44F2C448ECAF253E44055AA4AFC4D4E618BBF7F6
0847F4AD57852D125F52503D138EEBB5C35DB7E6FF089D85EF3D59177D6853B7
FF4DCA48A2C6450DAF6AE7485D918680B6246955433B7E96C0D52B86F6985D93
AEA8FD99F7CE5A6EDF9F82F3DCD54C24AC7F5725E8D752728B16161496E9D02E
A707BCC03E7CE1BDA2E3632B4A11707F59DF2FD8556EC51A6594DBA10EC63EB7
A8585255CC0C8C8B32CD6316A41829AE725CE606F4A4FD4DA668556D79F4AC25
BF9E697A5DB9F54B573E1EAA6D791100EAD10708C7E706E8CBDD596589510D4E
A45E3CA12E8144CF2A4E025D5293F77BF25BA77276DF7C97999133B17612ABFF
D70E77479B9C8ABBB3A51D3A6F6F66CA99610B1A23618D13E1A07B26D29ACFC8
191E5B2829F3C990A5C474E53FC8B282F11A7FFA86D56BD2349AEC811B22D300
2781921B9EDDEAA1B62C5F206266BA751F865F9A5F5AF517BC35F6F732012015
D0BB42652388A219FCF002C2C0335D2D190C0C425C4FA28367480051E56A90DD
46F1C707> |
79 <001C60D8A8C9B854D0F40B290C0C99C039EA88FDD293C1FEAB15D2F6B8C4
304B80428A9C9B5571B0EE47CC29A6D67DEE51ABBBE57F6DDF0C02037EE8B682
8D244FB880634A92D947174D08130E6E2CF978B5067AA82A4CABC55E600FCE55
27D6441CE02F5A28D63A618F> |
68 <001C60D8A8C9B77FE2CEA139CB15A16492F485162FE605BA10F460B6DC55
0DEC7BA0BCA1B89C8429260417FE96BA758C22F6762386C9F1CAF53456C89D4C
6B177AA810FBB608A57F053C4DA17FD8A122DD63CD2EE0563B0FFA48FEF5CBDB
333E4EF010579993E238020BE59CA5D3F31F329BD506C436A3A2AAAB6CBD385F
DB0E5188BC3D34A31214C941C253FAF1F818F84A3F73340CA7F3B7A85C87022E
70BF3FF56918287082AAA1D7B6CDE998BE3D8663592D3F0DEFC69D87A351A298
95DE83B0D7478C3C01D85F944C563EFCF85986470E4B8EDEEDC025A0FB3217B7
37B99EB7B6E2243F66B907475D1C465D1D07EDFEFC5123FE5A4D48A8B15BE327
2EF1EF1464C3F0D45D7CBB8749AF571E09> |
71 <001C60D8A8C9B7A73DB9CAB5EAE520FF5085D357A7F1B1CBAAAB9D3C3D20
3065B58561B55699E1F852D974E24DCDB3FAC1151DF1DB63800C3FA779DDD332
9A86B4E9458DA578ECA7DC82AB1CB5558FB398EDD8AF237A44BB61AD8FF07FB8
57EAFB03E3B7223E134D0A703B89A6CB54355CD1F1518C86E0EAFDD151579F5C
CB01DCDB1BD56096AB78D2E9ADD609F7B156D422E9074A62B38BF35F82A0AAD1
04E0C2CB94DA5F3F39F8DB246ADB5F008F682AF80FAED0C691E7A61887936278
3A36815EA1CE5876FAC4F83CDFE1BD4A> |
45 <001C60D8A8C9B7361F02BE73C4CFD35D33EC00415B3CA6C152F65E48AE8D
6C4B6496036675C5C8F5E597063106A19B1BA3F0EE04532306F107DAD9A65C07
2D06B9FB644D70E38B84756493EFE51AD825A2D0A3C49BF5AC9839A3D4E170FA
5A71858A97C57537B2C6868525AE4970995137FD1FB1D499789D521C401B0622
ABE206084830544BAB810C8807A7CEA0D0FD4C6EE8D48ABB> |
82 <001C60D8A8C9B7A73DB903ADC070A7C49752E736186D1727D7954B8F3DD4
416250EFB2715F7FEA4B4F24611BB7B770A0989FFD12258A4EC0D90DD9998BDA
F996A44DE027AE6C486FF30337F30EB574748A139900482713C8EF6F8455DA43
6702294DB22515A99C4ACC57A269598D687C25D5F66128E3441FE6E0D99B55B6
8D9C19E720D771564C6692898D127FC55C985D08C7E6B95F874FD094> |
88 <001C60D8A8C9B7A73DB9860E0681DA8AEA1E5FBC1C72A452614FEB33CC58
A199CCF544A550BDEE35652D618DE4A02AA9CF0753ADA232102DC8DC25CB9581
52D1B74BC447B68C074C25C2126470565A20B42A419CDD0C7A1DA63C6A764D55
5B867A9BE961ADBD0AF5B2007F47FCC9435F8B51D3F3A5D83941DD57A0C4D32E
169A6BACC26F8AD3C9372F1114911D1D3F3FB2725FADBF9F529AA2CFB178B79F
97520325221F3417C7781EB09765> |
85 <001C60D8A8C9B81F2C3A9916C4CB28F21023538C2A69D3E08B0A448624D2
CE6C19473DC07A6A4C3E0D8D2DFD7B9589F2461E064A251BFFB4F1472DE500E9
83E2E667F5383BBA338778795701927E45FB048834AFB7FF5E045C79CAD4F90B
53A8A93629365ECF1B64B7916DE5DAB65845D9DB9B71D2B7B722597153CE4BA4
55AAC1333D36087A511839B6E1301E787D03299ED6FB7E787777CDACC74EC37D
8C360275B503E4954E912CD342> |
73 <001C60D8A8C9B81F2C3A6EB915F5DDF05E4CD39F13547A7EF54F9D79FF32
092BEC553783B472AF53E99B3070692992C4C512F2D79447B5EC673AA5FA8274
BFE5BA294793E06A2CD85C961166E35F08CE852DFFE5F2678D2E0B1687083D40
FC628A3BE0EDFC936C866DE25768CCC0F39E7FAD6F5686BB7C64B79625F56C55
73F9A5214AA079CAA28A8468CCF29829FD2A747DD586D41C21A37BF93A8AC8FD
D941D5FFB6450DF53658C2420EB0E5E88807E727AED5F7> |
48 <001C60D8A8C9B59F85E8A8526E50FEB33438675EDBBD0866093A4555E3EA
3A35849B91EFFB88205281CC77395AC14DF328B50F1F179210F0307F50BFB242
AA7F76F18203303EF0BF46B76E61FB539D568EF9F434EC657F4C5CDE1BCAA90A
83BAFEB02869664DC06CC8CA4FA1E876C39F3F5371AD261F117CDAF8F6A4E96E
CA4F5088752E105CDEB8FBEB2F7F82D31A2FEB6DF3C053295A006D723DEE7CEF
30A9F16E8C6EE80DDA09053247> |
76 <001C60D8A8C9B854D0F4318DEB2BF4A8C14C2FAB601E0ED2FF31B9BA2C4F
4D9D824A65F9E753CDA6D59F3AE6B969EC176D4AA1F064BFADF6F4B6A5454B78
F98C4B41AC403B87C0044C2A2776BF32D7D2C5370D6DB44827DB4719A169BBE3
65B0C0BED49A30732BB5E35B7101E488713F0203C9161D1F92C48C80A6400850
90E2C5D79817DC05EB1FC5E4D24EE71772E51241DF9FD4D574115CFC53427DCB
CB8CA3E9F85837FAC6> |
70 <001C60D8A8C9B77FE2C180CE42B4078449B9D767742AB4CF5971DFD438EC
C54400989182964B065BACA704BA363536AC987FC433F59A23A3DC16CBD969F4
2A6041BB8327C43B9105FC5DF44A0437E9E26FE545542A602D007FC6A926264F
9C2999730E7919239B324086FEA852156F456647AA0692084759C352D6998971
799F4BEF3EFB7DE91C98C83C567200278FF2145E16D28EDE7556C59DB204> |
39 <001C60D8A8C9B6079F62679EB6BE171B70F78590F81AB62F69F1BD2EFC86
EAE566847745E296D0CF61872DA4D8690C62AB23EE8E1DEB0EAD4BD93A2494CA
759A81248BAF55E0D2E2E5FE71261287BF00F8CDF501793AB3272F80F7AE3E40
7CA730AC3648B3AC2D58C8D1FD60CD7DB1F886A79A4080D8870256B6E127906D
500379950803F077453028FB6169> |
80 <001C60D8A8C9B6FF86F5D75501F5946D14C10E01941D6F8F408CE1116793
2D24264D7EFCAC2AE86125FDD757A8758D869BC4213413CCB2A6A255440BA181
6E9DC45844CC319542821B45F7B81EE7391A0EDD08008613940B7EF538F41747
A2556BE4D609FA0E86A3720064373B35B3C09F29E00670FDA88D75DD91439C68
FD574D15688B76675600DF49F10BE44872E462D2FA9EDC453EEFA6E997D8F249
107C6F71C5B180EF91CFB08123DB5F12D5248BB769BCDBF86D09B3C1EE1D61D1
8CE6632A82186FF826CE8FF5C9F24094455D2446DAB1258D7CEF6AB64018AE95
5617323D2765A0C9FC9EE9EFC157214A4EF1A088A6CBE09BD12BF0618C85527D
987ABAA0F84BBDB3F467CD6D1AFC5F01D6CD6E91196626F968CD9EC222C872FA
FEC679ED97966B06F7D45253DA82AACAAC774A43132A3F4B4FB40FD07B5AFDAE
82B335C3B8E42DF7C6FCB1E78E5819FAE1E5B06EBADF2F71F0A59372AEE76B51
7996> |
77 <001C60D8A8C9B854D0F4318DEA6521478B60F6044DAEF7868836F24B60C0
1F8FF104577FAD0FB41969E65C00875715610D5549D6DAAB08B93DAF24EF054E
46E1EB981D6A0FC2F7B50B2B8F019DF50B5D4C1637EE43AB3592EB78AD07F28F
A8A877EB087C4C23186AFA6D5DE4848D9DB07C62ED4D9CCFC2A2B7A5CC01022E
8E444FD0278013A131F952B7BFC1BE02FEBD59BAE9D43DC0183C776C5A736461
C5006E87097EAC71E078346A344332A5F08E2C05F8767AE9FA349CB7EA6E8672
87459698C8B1104059B90614> |
17 <001C60D8A8C9B8707CC95A9B5DFDE3A4AF8C8BB7D0C82C30C322ED94985B
C6C2F162CD480F8280AD954FE8DC511B40B423DB4A6012D9C419E4DF4F375C6A
DD098717CA70F621> |
87 <001C60D8A8C9B854D0F414EAB29549463C152A8395E080F8A65050DED294
48713A9991EC80B85D2E40BC855D0C9C1C8F48B9F54A9F2AF77E5AE0CF2D93DC
43DDEECA57457D57C32A4E7F92D72E19B411BD6A8FD776B503B1ED0E4E775E79
8B36CAB4543E392F481E83DAF858D3B1A895E3CC06AB3573C04543D9> |
56 <001C60D8A8C9B6079F6D024388243061A610EA3A6326F33263CDE8BCFFE9
F148F3D7F4C9725D2BAF9A3232BD1EB145B5A77D8B0651FBD8E8A9FB06CCD2A8
CC2722C436D9102F6A183E894B34B7045CE7C217957AA9B87F4515C93092C441
847223DE93B9E3D8ECF6C02AE8C75FDAA89CB34F7A7CE8EBAED7CDD0E6765B39
52A1A95E2E1735ECFE4DF6802DC3188EE398A9F5CCD7DB8E0B3AB2D84DF5AF6C
30AB040D323559946C1407613CE0866FB1002EF0B5DF66414A685DAD87F9D351
3811F878AD> |
44 <001C60D8A8C9B81F2C3A0A02564E7D4C279888DF3754179E93227DE304C0
C964F0884ECCD4584153E47F1EA31388FE202C61849A093340FE4B9D53774AFF
48A8CAE2304CA5B92609AD38240AA6AEAF6E8AB66763220047F647E30DE8B74D
2A7DF15DDA4EFCA27B915E1B9ED43E7C12> |
57 <001C60D8A8C9B6079F6D060A2FEA7FC1569E0C14DA541DD91C00EBC3777B
DE67491C2EA2113C451959D17D324EE8DBB436A0F30BF65402B93EFD32E095FD
4A5BC20760673D3864924C1ACF695D3BD682644F24B440E38C1FF24D4CC16712
B502AE5F89EDD273AE3A1DBED84FBFBD9B8AF85ACA697ED4658DA6CFEAC07815
4F7D9BB4AB2053> |
53 <001C60D8A8C9B64EDFFA947759DE5E4889D88CE18F8690AE99A205DDE2B0
3BD344BEA750622B2A044F453846260E52F609F4B4A04ACF011765AB379E687D
E6B09D424D16AEE22850269A8AC1FBA0CB1130D1AA42D9BB70A20B4BABF91935
6C91EFB227A4D8127EEE951F8E9564FE86E42C72F4A2240B89192C9DDC8F972B
78271704B555EEFB95806003600DA3EB98ED971FD7E60CB5D9582744AABB3235
A69A23AA1EE2086410DF2F65A7A8081CD915B1599189D60C09010312710E9ABC
20DA4562DBD2C8D044173C4F2A486F4032CE9228CB8A1897A7C6FF5127> |
54 <001C60D8A8C9B7EF32243DA21D5631D8766D74D715030BA7905332A0CFAC
49387DB487F69FE973B04989A1F5B84226AC0574A3AC8A92A20A67AC6A93CF1F
8D7D050DEAAE8CF31B4A5FB504F0A0814E8C9022E7C7EFFB00070B62EB780F5B
FD7AC1407620155D4B738E953EA9E8519FCB3635DEED6C82D9AB968BE1131CEE
B6B072A246B745E2E47F0890CD4A4DD5061C30741173A5782D0F5AE0E6453375
18CA765AC1ABF9ABB13F9D6F8666630C08F558B2481DB7C0FEA08930FF35DE90
4907DBC222EF06C7863FAB3917A57116C566327E1977A70091D7628A2440BE3A
B444BD01341C54F829742469A9B1CF3048C0B204E355F432B93B12EA12C84F80
CE13D22435E5FCC1B5A000DE> |
50 <001C60D8A8C9B6079F6288DCC34B8AB15434B53D5CBCF7E29104F391BE15
72E1D4E07ABEE690B714C43DA0F68F9B727CD1B8007FE243EEEBD45E7815504A
3113BAFAC54AC3D3B019A1C9ACF716BD3362CCEE1A09F2069AE9AF5406AA47EF
076128BEB6A74EB29D02BFBE8F43F41B56E48CC0FA84987A887327DB516D9441
F2C6BDCB9AC2AD82E8> |
47 <001C60D8A8C9B7D8BE1910D0EBEC744B6638E6ED4C6FC0AF39F5B8B10BFA
09270956A997B577BBD8E3EC179B174ED931484CCFFCF819D4978AE37145A7A3
C221DF78A5AAD08DFCBE2638BCFCF6B4930FFFAD1163890B85697ECB905727AF
12A0E5C1679B01834AD8D0C4111313E17E548887938F4F64DA1DB39BD7CD6874
8B847D2C24AD687E0CDB56> |
92 <001C60D8A8C9B7A73DDE03E4B644C159EB8B647E016C26B087177A3C5BC5
BAF02161182070C8A4222C2E1ED9B95B756DF22232FA7BE5897B7C6D57479511
9A3B50894B8B0E1A184B7636697D129D88C76A3FD42BABE719D85F7DC372AB50
B8B16D988DA863EE6A5B7454A406C9D5E815158A5786509E6DF27377A83F3454
DD6905EA3123CBA5BA0D4772C12767864CF2C5FEDE2AFF05D3CC0534D74E6AE9
DBF9F3B49677449A761BE771C9C1AB2D4DC994988233EE24B9E175796C6F1351
8A71BC990F312D4821883A95164BCE1683B85434AFA8> |
24 <001C60D8A8C9B7A73DB97C1FD4849B14157B765BEEE66B9438731A1E1DBF
6D904609867EBF49E3E19DC6BA786F7382AB36C8CFA3690DF4F8E7A258691DFD
D71792965BBA1DCE407BE309901C1513A762BED3C73A852D4EDA1BE20A2B364C
59E2224D36D9C8BEE5DE8D6C54C49D0F66DB7448A8FCE0E63D5DEE7BBBA026A8
08CDA9AD5556005639017FF42B963FB833B4B64B6445B350600BDCDD563F> |
15 <001C60D8A8C9B8707CDCEBD9C789FC719A6E699B9D99F66BE737EEBAFF71
11B9225F270084B7F68BC0DDECBD8A23968AE48D16B628A165111DDE7E6CD8DD
6007F82AE5C9057E54AF2D17F8AB7C9B11610F20000D2C65AB75461D35EBD119
C9E1C1E902BC7C231A59B4A0E3A4C206C50EEA0EE1> |
21 <001C60D8A8C9B7A73DB6F198797B24E7DF20E340C763AB9A17095FFDDA6B
4B0E4D4AC4BE83AF302018AACAF29AB5FCEB98A93FCCD2C9A968B7CB1B433E25
003CA8A63287F6BD1729C8188A209A7171C9BFB11D2FACEF2FADF63141D976A0
F90EDDE709834FFBF963952A5213F00F39F098C30D0F91D40A57CAEF920CE11E
C41D90433CE0F55F0A42A96AF852FD50FA> |
19 <001C60D8A8C9B7A73DAAFDCA97EBBC8D8E35A41D9404C5638B059E1CA50B
5366543C3D584AD9E19987218AC5999BB0F2477597AB6F8DD868788C8440CBF4
A338EF64ACD9BF2268656755741DB71FD86387D4A7AA1CFD19937BFD209E4FBC
D1952717C8CF8C0555CB2D0238DC43B2A6A2DE4D7366DB210D2673870D0B0C58
344E6AEF91B916BAAEAEF37B22F065E870AFE6638E56D0B4AE01785D59EE2340
2242D396440157FC51> |
41 <001C60D8A8C9B7EF322BE6235043C5A7A6ECCDDDC390BE41D3E01CEDAA91
CB335118BB7C10CD87A1A789356A0826D033ECDD0352DC64AE55B383C11F3EB1
8A6F42CD78A260CB051779A3B4D92350DD65D27B671C1609DC36FBFF44C40F44
FB014C0462CFF40EA9650CDFB895B99B69FA8BD3EB8152DF452581818551FCC7
745E9E79F62FD5E1668E4EFD8B2F33AB5D5ED30AB06AFD78EF98B1A68AA26FC8
B4D7DDC1356637FA048F199EDF19A428> |
83 <001C60D8A8C9B7A73DDE03BEEA75B31F61E78B8C94AAF630ACAE1A607BD4
0EB48302A40F17E763F71E8B5595B8EEEBB33C0827EEA0DE5370DD4C7A092440
48D0DA814D6E79BAC2B8E456D2F119496FF35E5A13F4B8F71ECD895B10E20FBA
C666023D0941B5A0FF139CBD18745BC2892DD91EE541EAD2B54AF0839C3327F7
5904A81A3805CFC7AF83735A7079B305271753A14327F3CB693ACCFE5C9D6A3B
8431B357819DFFAD81BD2A60573E4CA4C48EC0A5E07291768D829E6A70067C07
6E94545FD4D8E2BB7431617263A47DB04F0B8630D6AB06FF2DD1B1F383A59D02
DF1C7730E7CC0F462D79552DFA> |
86 <001C60D8A8C9B7361F027554B74948DF9D509740193A97E4C5A946CCDAC2
2ACE16A97A38CAF70766C30631C22477718670FA129F481BA880FC6C2A8C233A
039A7A46ACD6F3CA0422B1CD13AB9E5980A98B78F274FD5FB0A519013427E3DF
40BD973F22C9B236BE3D27B0A78749138244A4ED344575D4F7F677439F8C2359
FAAB210EA03D2DAABF38A6B5B4F0819D6E85CC68A9859B12239E01058FD0C7C5
93B22AC00DE1C2A90508610457C5DFEA41C78C4C677B338B4C0ED41B0474AF50
9B93D8B3403DD443273DAE4F97B7CDCA81379AB0933639> |
38 <001C60D8A8C9B64EDFFBA6F0CF8A2CDA79A069460245F5373797A9E71DEA
345031885496623E7C65FDB470FC6BFF7BE37B20FF363C43CAB08BA8E918FCBA
9DEB0021B12355971EB2945D0594E78D2EE4D593C49790304E106026BC942097
158DDBF12F8B83C9752B02212C28957008FA70A685356583CB4C7D6F55B12AC7
399ECFE4B69C91B472A6132E65C9F7B697AE783582C9D65C392064A7C49C83B2
83409DD22AD16B7DD28B54D5FC454C> |
139 <001C60D8A8C9B6ED05D56B3AC952B41D5E1618BB72783F93DD757A34CAF
D2059F979E96AB69544D34D7D214304C5E3A3D6FB7ED40A02953B36A1D880869
5B78C55D29585AF0F1827ADCBC373AE9378750CE83F29C2BD4B1F22E696679EA
182D167CDE093518621C3C1C9ACEB5339063D89C3E4048FE3390C0CF71F19B53
B3672409D7CED1106FCB7452461517092153D818854AE029A9C7864F0B1B6250
F9BFDF2C237B529DB82FB1CC9757D16C9794FAF2915A0854E808EE6A3487C4C4
B2E40FFC2A8E369FF0D8FF87FCF2FD6340D9EFE8124097E871344CDE3C2C6953
E424F1CB8E3817373DD22FE107FA44A457434796E0736B85F78A635A86E4FB5F
F26E32327575581AB5290B49DB8F174F9086A0EA051F2DF206A0C7B08286A506
79F0641AC75ADD873D9D02C6399CB06B7FA2299EE0D27FA308730007413EC932
D8C2E286C8524E26051BFCFDFF78D027511> |
20 <001C60D8A8C9B7A73DB92A3F8C4B412A6756A4F8D8439622AB29A83C93F5
89D112DBEAB54F9ACF0D9BFA06C28638F8F8CA9EE7AFD734575522301B5C0272
0FA00A934493EC3D856AF45EEE1D7462FF2375B7250579D34D9C249B6BEBF8EF
41DB28C0847307B8DCBC66> |
28 <001C60D8A8C9B7A73D92CE6A66BA49C70A16072730ADF99EB50B81EC870A
54394DDFE38FABEC18FB7B826889153F28664691169009324BD4E9661571BB91
EC6E47B44C4894E182CDFFE1F715113C62DB236897358730FEA1D138847386AC
C90D129A1077A70DC9DAEA483EA5552EB360DE0397958942F0F1C3FE8C7E6CD3
CF99FAB1F16B30CA1A210BFF9DDE43DE5ED76615C174EEED6DAB9E5A77B1C62F
BE9CABC1B3A46D497C4D6EFFC96F4CC02C8A01382FD55BD7B4> |
36 <001C60D8A8C9B6079F6D0C3DD1DA701F2FEF50BE2CCF679467EAB463D54C
495B1FC98737C4805A67EB9B211579E256E1BCD120087B7083980EFC748D95F1
5A9738703A6CB4125517112E8D63595864B93D16C7B325AB1759098D24D8A43A
63AEECA533864B64013C499C4207455D5210408E58672A172F78CB14D7398507
1102DFA93B6532> |
89 <001C60D8A8C9B7A73DDA3AD4E30B5CCD7D3C12F7959C83D9C808662F1D29
403E3640D88B6D61CC1EF17C120CDCE65E70C4FE9E153F8E52BB6A45EF1A33FF
33B350E779BE70BFD66B1893DAD63FDF011F2039FF0D075853D9D0E3D26BA0ED
AEDA247A4C2489AC431F6D923096DA608667B0FA6E60F963DA8A46029578956D
98258ABD433E9E> |
!
end
ct_AddStdCIDMap
%%EndResource
ct_restoreCIDInit /AXNBAA+TimesNewRomanPSMT-Identity-H /Identity-H 0 [/AXNBAA+TimesNewRomanPSMT] ct_ComposeFont pop end end
%ADOEndSubsetFont
/QOROMI+TimesNewRomanPSMT /AXNBAA+TimesNewRomanPSMT-Identity-H findfont ct_VMDictPut
QOROMI+TimesNewRomanPSMT [8 0 0 -8 0 0 ]msf
234.19 766.931 mo
(\0007\000K\000H\000\003\0001\000H\000Z\000\003\000\(\000Q\000J\000O\000D\000Q\000G\000\003\000-\000R\000X\000U\000Q\000D\000O\000\003\000R\000I\000\003\0000\000H\000G\000L\000F\000L\000Q\000H\000\003)
[4.88879 4.00085 3.55286 2.00085 5.77686 3.55286 5.77686 2.00085 4.88879 4.00085 4.00085 2.22485 
3.55286 4.00085 4.00085 2.00085 3.11292 4.00085 4.00085 2.66479 4.00085 3.55286 2.22485 2.00085 
4.00085 2.66479 2.00085 7.11292 3.55286 4.00085 2.22485 3.55286 2.22485 4.00085 3.55286 0 
]xsh
82.7504 776.931 mo
(\000'\000R\000Z\000Q\000O\000R\000D\000G\000H\000G\000\003\000I\000U\000R\000P\000\003\000Q\000H\000M\000P\000\021\000R\000U\000J\000\003\000D\000W\000\003\0008\0001\000,\0009\000\(\0005\0006\000,\0007\000\(\0007\000\(\0007\000\003\000,\000\003\0002\0006\000/\0002\000\003\000R\000Q\000\003\0000\000D\000\\\000\003\000\030\000\017\000\003\000\025\000\023\000\025\000\023)
[5.776 4 5.776 4 2.224 4 3.552 4 3.552 4 2 2.66394 
2.66394 4 6.224 2 4 3.552 2.224 6.224 2 4 2.66394 4 
2 3.552 2.224 2 5.776 5.776 2.66394 5.776 4.88794 5.33606 4.448 2.66394 
4.88794 4.88794 4.88794 4.88794 4.88794 2 2.66394 2 5.776 4.448 4.88794 5.776 
2 4 4 2 7.11206 3.552 4 2 4 2 2 4 
4 4 0 ]xsh
323.605 776.931 mo
(\000\021\000\003\000\))sh
332.053 776.931 mo
(\000R\000U\000\003\000S\000H)sh
348.269 776.931 mo
(\000U\000V\000R\000Q\000D\000O\000\003\000X\000V\000H\000\003\000R\000Q\000O\000\\\000\021\000\003\0001\000R\000\003\000R\000W\000K\000H\000U\000\003\000X\000V\000H\000V\000\003\000Z\000L\000W\000K\000R\000X\000W\000\003\000S\000H\000U\000P\000L\000V\000V\000L\000R\000Q\000\021\000\003)
[2.66394 3.11206 4 4 3.552 2.224 2 4 3.11206 3.552 2 4 
4 2.224 4 2 2 5.776 4 2 4 2.224 4 3.552 
2.66394 2 4 3.11206 3.552 3.11206 2 5.776 2.224 2.224 4 4 
4 2.224 2 4 3.552 2.66394 6.224 2.224 3.11206 3.11206 2.224 4 
4 2 0 ]xsh
182.261 786.931 mo
(\000\003\000&\000R\000S\000\\\000U\000L)sh
206.485 786.931 mo
(\000J\000K\000W)sh
216.709 786.931 mo
(\000\003\000\213\000\003\000\025\000\023\000\024\000\034\000\003\0000\000D\000V\000V\000D\000F\000K\000X\000V\000H\000W\000W\000V\000\003\0000\000H\000G\000L\000F\000D\000O\000\003\0006\000R\000F\000L\000H\000W\000\\\000\021\000\003\000$\000O\000O\000\003\000U\000L\000J\000K\000W\000V\000\003\000U\000H\000V)
[2 6.07996 2 4 4 4 4 2 7.11206 3.552 3.11206 3.11206 
3.552 3.552 4 4 3.11206 3.552 2.224 2.224 3.11206 2 7.11206 3.552 
4 2.224 3.552 3.552 2.224 2 4.448 4 3.552 2.224 3.552 2.224 
4 2 2 5.776 2.224 2.224 2 2.66394 2.224 4 4 2.224 
3.11206 2 2.66394 3.552 0 ]xsh
390.995 786.931 mo
(\000H\000U\000Y\000H\000G\000\021\000\003)
[3.552 2.66394 4 3.552 4 2 0 ]xsh
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 /1 ]]
[/CSD [/0 ]]
] del_res
/QOROMG+OTNEJMScalaSansLF-Bold*1 uf
/QOROMG+OTNEJMScalaSansLF-Bold uf
/AKJBAA+OTNEJMScalaSansLF-Bold uf
/QOROMD+OTNEJMQuadraatCap*1 uf
/QOROMD+OTNEJMQuadraatCap uf
/GFNBAA+OTNEJMQuadraatCap uf
/QOROMH+OTNEJMScalaSansLF*1 uf
/QOROMH+OTNEJMScalaSansLF uf
/ELRBAA+OTNEJMScalaSansLF uf
/QOROMB+OTNEJMScalaSansOSF*1 uf
/QOROMB+OTNEJMScalaSansOSF uf
/HIBBAA+OTNEJMScalaSansOSF uf
/QOROME+OTNEJMQuadraatSmallCap*1 uf
/QOROME+OTNEJMQuadraatSmallCap uf
/HJCBAA+OTNEJMQuadraatSmallCap uf
/QOROMI+TimesNewRomanPSMT-Identity-H uf
/QOROMI+TimesNewRomanPSMT /CIDFont ur
/QOROMF+OTNEJMQuadraat*1 uf
/QOROMF+OTNEJMQuadraat uf
/UGXAAA+OTNEJMQuadraat uf
/QOROMC+OTNEJMScalaSansLFSmallCap*1 uf
/QOROMC+OTNEJMScalaSansLFSmallCap uf
/QJJAAA+OTNEJMScalaSansLFSmallCap uf
/QOROMA+OTNEJMScalaSansLFCap*1 uf
/QOROMA+OTNEJMScalaSansLFCap uf
/PBAAAA+OTNEJMScalaSansLFCap uf
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
showpage
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
